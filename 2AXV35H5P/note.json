{
  "paragraphs": [
    {
      "text": "//imports\n\nimport java.io.File\nimport java.text.SimpleDateFormat\n\nimport scala.collection.mutable.ArrayBuffer\nimport scala.io.Source\nimport com.github.nscala_time.time.Imports._\n\n//spark related imports\n\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD\n\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.stat.{MultivariateStatisticalSummary, Statistics}\nimport org.apache.spark.mllib.feature.{StandardScaler,Normalizer,ChiSqSelector}\nimport org.apache.spark.mllib.evaluation.{MulticlassMetrics, BinaryClassificationMetrics}\nimport org.apache.spark.sql.{Row, SQLContext}\nimport sqlContext.implicits._\nimport org.apache.spark.rdd.PairRDDFunctions\nimport org.apache.spark.mllib.linalg.Matrix\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\nimport org.apache.spark.mllib.linalg.SingularValueDecomposition\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.types.StringType\nimport org.apache.spark.sql.{SQLContext, DataFrame}\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.regression.LinearRegressionModel\nimport org.apache.spark.mllib.optimization.{L1Updater,SquaredL2Updater}\nimport org.apache.spark.mllib.regression.{LinearRegressionWithSGD,RidgeRegressionWithSGD,LassoWithSGD}\nimport org.apache.commons.math3.distribution.ChiSquaredDistribution\nimport org.apache.commons.math3.distribution.MultivariateNormalDistribution\nimport org.apache.commons.math3.random.MersenneTwister\nimport org.apache.commons.math3.stat.correlation.Covariance\nimport scala.util",
      "dateUpdated": "Sep 22, 2015 5:22:43 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440043144122_-46045349",
      "id": "20150820-035904_74190770",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import java.io.File\nimport java.text.SimpleDateFormat\nimport scala.collection.mutable.ArrayBuffer\nimport scala.io.Source\nimport com.github.nscala_time.time.Imports._\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.stat.{MultivariateStatisticalSummary, Statistics}\nimport org.apache.spark.mllib.feature.{StandardScaler, Normalizer, ChiSqSelector}\nimport org.apache.spark.mllib.evaluation.{MulticlassMetrics, BinaryClassificationMetrics}\nimport org.apache.spark.sql.{Row, SQLContext}\nimport sqlContext.implicits._\nimport org.apache.spark.rdd.PairRDDFunctions\nimport org.apache.spark.mllib.linalg.Matrix\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\nimport org.apache.spark.mllib.linalg.SingularValueDecomposition\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.types.StringType\nimport org.apache.spark.sql.{SQLContext, DataFrame}\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.mllib.regression.LinearRegressionModel\nimport org.apache.spark.mllib.optimization.{L1Updater, SquaredL2Updater}\nimport org.apache.spark.mllib.regression.{LinearRegressionWithSGD, RidgeRegressionWithSGD, LassoWithSGD}\nimport org.apache.commons.math3.distribution.ChiSquaredDistribution\nimport org.apache.commons.math3.distribution.MultivariateNormalDistribution\nimport org.apache.commons.math3.random.MersenneTwister\nimport org.apache.commons.math3.stat.correlation.Covariance\nimport scala.util\n"
      },
      "dateCreated": "Sep 20, 2015 3:59:04 AM",
      "dateStarted": "Sep 22, 2015 5:22:43 PM",
      "dateFinished": "Sep 22, 2015 5:22:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def toInt(s: String): Option[Int] \u003d {\r\n  try {\r\n    Some(s.toInt)\r\n  } catch {\r\n    case e: Exception \u003d\u003e None\r\n  }\r\n}",
      "dateUpdated": "Sep 22, 2015 5:22:56 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440243217560_-690739159",
      "id": "20150822-113337_1377870022",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "toInt: (s: String)Option[Int]\n"
      },
      "dateCreated": "Sep 22, 2015 11:33:37 AM",
      "dateStarted": "Sep 22, 2015 5:22:56 PM",
      "dateFinished": "Sep 22, 2015 5:22:57 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val financialRiskAnalysisParam \u003d toInt(z.input(\"Financial RiskAnalysis Param in %\").toString)\nval nTrials \u003d toInt(z.input(\"Number Of Trials (Min 100)\").toString)\nval slidingWindow \u003d toInt(z.input(\"Time interval\").toString)",
      "dateUpdated": "Sep 22, 2015 5:23:09 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {
          "Financial RiskAnalysis Param in %": "10",
          "Number Of Trials": "10",
          "Number Of Trials (Min 100)": "100",
          "Time interval": "10"
        },
        "forms": {
          "Financial RiskAnalysis Param in %": {
            "name": "Financial RiskAnalysis Param in %",
            "displayName": "Financial RiskAnalysis Param in %",
            "defaultValue": "",
            "hidden": false
          },
          "Number Of Trials (Min 100)": {
            "name": "Number Of Trials (Min 100)",
            "displayName": "Number Of Trials (Min 100)",
            "defaultValue": "",
            "hidden": false
          },
          "Time interval": {
            "name": "Time interval",
            "displayName": "Time interval",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "jobName": "paragraph_1440239667607_256331214",
      "id": "20150822-103427_27578328",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "financialRiskAnalysisParam: Option[Int] \u003d Some(10)\nnTrials: Option[Int] \u003d Some(100)\nslidingWindow: Option[Int] \u003d Some(10)\n"
      },
      "dateCreated": "Sep 22, 2015 10:34:27 AM",
      "dateStarted": "Sep 22, 2015 5:23:09 PM",
      "dateFinished": "Sep 22, 2015 5:23:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val algoNAme \u003d z.input(\"Regression Algorithm To be used  (Values : LinearRegressionWithSGD_L0,LinearRegressionWithSGD_L1,LinearRegressionWithSGD_L2,RidgeRegressionWithSGD,LassoWithSGD)\").toString",
      "dateUpdated": "Sep 22, 2015 5:23:13 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {
          "Regression Algorithm To be used  (Values : LinearRegressionWithSGD_L0,LinearRegressionWithSGD_L1,LinearRegressionWithSGD_L2,RidgeRegressionWithSGD,LassoWithSGD)": "LinearRegressionWithSGD_L0"
        },
        "forms": {
          "Regression Algorithm To be used  (Values : LinearRegressionWithSGD_L0,LinearRegressionWithSGD_L1,LinearRegressionWithSGD_L2,RidgeRegressionWithSGD,LassoWithSGD)": {
            "name": "Regression Algorithm To be used  (Values : LinearRegressionWithSGD_L0,LinearRegressionWithSGD_L1,LinearRegressionWithSGD_L2,RidgeRegressionWithSGD,LassoWithSGD)",
            "displayName": "Regression Algorithm To be used  (Values : LinearRegressionWithSGD_L0,LinearRegressionWithSGD_L1,LinearRegressionWithSGD_L2,RidgeRegressionWithSGD,LassoWithSGD)",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "jobName": "paragraph_1440245520994_-171637916",
      "id": "20150822-121200_1189893064",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "algoNAme: String \u003d LinearRegressionWithSGD_L0\n"
      },
      "dateCreated": "Sep 22, 2015 12:12:00 PM",
      "dateStarted": "Sep 22, 2015 5:23:13 PM",
      "dateFinished": "Sep 22, 2015 5:23:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": " def trimToRegion(history: Array[(String,DateTime, Double)], start: DateTime, end: DateTime)\r\n  : Array[(String,DateTime, Double)] \u003d {\r\n    var trimmed \u003d history.dropWhile(_._2 \u003c start).takeWhile(_._2 \u003c\u003d end)\r\n    if (trimmed.head._2 !\u003d start) {\r\n      trimmed \u003d Array((trimmed.head._1,start, trimmed.head._3)) ++ trimmed\r\n    }\r\n    if (trimmed.last._2 !\u003d end) {\r\n      trimmed \u003d trimmed ++ Array((trimmed.last._1,end, trimmed.last._3))\r\n    }\r\n    trimmed\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:23:16 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440046151467_-240658250",
      "id": "20150820-044911_879789817",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "trimToRegion: (history: Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)], start: com.github.nscala_time.time.Imports.DateTime, end: com.github.nscala_time.time.Imports.DateTime)Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]\n"
      },
      "dateCreated": "Sep 20, 2015 4:49:11 AM",
      "dateStarted": "Sep 22, 2015 5:23:16 PM",
      "dateFinished": "Sep 22, 2015 5:23:17 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def fillInHistory(history: Array[(String,DateTime, Double)], start: DateTime, end: DateTime)\r\n  : Array[(String,DateTime, Double)] \u003d {\r\n    var cur \u003d history\r\n    val filled \u003d new ArrayBuffer[(String,DateTime, Double)]()\r\n    var curDate \u003d start\r\n    while (curDate \u003c end) {\r\n      if (cur.tail.nonEmpty \u0026\u0026 cur.tail.head._2 \u003d\u003d curDate) {\r\n        cur \u003d cur.tail\r\n      }\r\n\r\n      filled +\u003d ((cur.head._1,curDate, cur.head._3))\r\n\r\n      curDate +\u003d 1.days\r\n      // Skip weekends\r\n      if (curDate.dayOfWeek().get \u003e 5) curDate +\u003d 2.days\r\n    }\r\n    filled.toArray\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:23:19 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440084229276_-123933561",
      "id": "20150820-152349_846390742",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "fillInHistory: (history: Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)], start: com.github.nscala_time.time.Imports.DateTime, end: com.github.nscala_time.time.Imports.DateTime)Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]\n"
      },
      "dateCreated": "Sep 20, 2015 3:23:49 PM",
      "dateStarted": "Sep 22, 2015 5:23:19 PM",
      "dateFinished": "Sep 22, 2015 5:23:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/**\r\n   * maps a Stock name to ID \r\n   */\r\n  def readStockNameMap(file: File) \u003d {\r\n    val lines \u003d Source.fromFile(file).getLines().toSeq\r\n    lines.tail.map(line \u003d\u003e {\r\n      val cols \u003d line.split(\u0027,\u0027)\r\n      val value \u003d cols(0).toDouble\r\n      (cols(1), value)\r\n    }).toMap\r\n  }\r\n  \r\n  \r\n  \r\n  /**\r\n   * maps a ID to Stock name  \r\n   */\r\n  def readIdtoStockNameMap(file: File) \u003d {\r\n    val lines \u003d Source.fromFile(file).getLines().toSeq\r\n    lines.tail.map(line \u003d\u003e {\r\n      val cols \u003d line.split(\u0027,\u0027)\r\n      val value \u003d cols(0).toDouble\r\n      (value, cols(1))\r\n    }).toMap\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:24:20 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440221273186_-1021588531",
      "id": "20150822-052753_324133671",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "readStockNameMap: (file: java.io.File)scala.collection.immutable.Map[String,Double]\nreadIdtoStockNameMap: (file: java.io.File)scala.collection.immutable.Map[Double,String]\n"
      },
      "dateCreated": "Sep 22, 2015 5:27:53 AM",
      "dateStarted": "Sep 22, 2015 5:24:20 PM",
      "dateFinished": "Sep 22, 2015 5:24:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val filePrefix \u003d \"MonteCarloData/data/StockNamesMap.csv\"\r\nval stockNameMap \u003d readStockNameMap(new File(filePrefix))",
      "dateUpdated": "Dec 3, 2015 1:02:36 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440221266292_1405807604",
      "id": "20150822-052746_300445541",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "filePrefix: String \u003d /home/hadoop/data/StockNamesMap.csv\nstockNameMap: scala.collection.immutable.Map[String,Double] \u003d Map(COCO -\u003e 581.0, HSNI -\u003e 1241.0, PTEN -\u003e 2052.0, UEIC -\u003e 2599.0, CSBK -\u003e 638.0, HEES -\u003e 1197.0, PWOD -\u003e 2064.0, VBFC -\u003e 2643.0, ATTU -\u003e 246.0, AMCN -\u003e 132.0, ANIP -\u003e 166.0, BKCC -\u003e 324.0, ENTR -\u003e 855.0, GNCA -\u003e 1121.0, RESN -\u003e 2141.0, LABL -\u003e 1457.0, FCTY -\u003e 938.0, RFIL -\u003e 2144.0, MPEL -\u003e 1674.0, PACB -\u003e 1896.0, ADXS -\u003e 64.0, NVFY -\u003e 1798.0, REGI -\u003e 2133.0, SIGM -\u003e 2300.0, LOAN -\u003e 1516.0, GTXI -\u003e 1158.0, CPGI -\u003e 601.0, CCIH -\u003e 454.0, QDEL -\u003e 2078.0, SLRC -\u003e 2322.0, OVBC -\u003e 1883.0, VCSH -\u003e 2650.0, FRBK -\u003e 1012.0, SALM -\u003e 2220.0, LECO -\u003e 1477.0, SGYPU -\u003e 2282.0, KPTI -\u003e 1444.0, ROIQU -\u003e 2178.0, WHLRW -\u003e 2752.0, ONCY -\u003e 1845.0, KALU -\u003e 1417.0, SBBX -\u003e 2230.0, ARTX -\u003e 205.0, UCTT -\u003e 2597.0, HZNP -\u003e 1264.0, BKSC -\u003e 328.0, GABC -..."
      },
      "dateCreated": "Sep 22, 2015 5:27:46 AM",
      "dateStarted": "Sep 22, 2015 5:24:23 PM",
      "dateFinished": "Sep 22, 2015 5:24:24 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "  /**\r\n   * Reads a Stock history from each file\r\n   */\r\n  def readStockHistory(file: File): Array[(String ,DateTime, Double)] \u003d {\r\n    val format \u003d new SimpleDateFormat(\"yyyy-MM-dd\")\r\n    val lines \u003d Source.fromFile(file).getLines().toSeq\r\n    val name \u003d file.getName().split(\u0027.\u0027)\r\n    lines.tail.map(line \u003d\u003e {\r\n      val cols \u003d line.split(\u0027,\u0027)\r\n      val date \u003d new DateTime(format.parse(cols(0)))\r\n      val value \u003d cols(1).toDouble\r\n      (name(0) ,date, value)\r\n    }).reverse.toArray\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:24:27 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440045782009_-1359424329",
      "id": "20150820-044302_1214027455",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "readStockHistory: (file: java.io.File)Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]\n"
      },
      "dateCreated": "Sep 20, 2015 4:43:02 AM",
      "dateStarted": "Sep 22, 2015 5:24:27 PM",
      "dateFinished": "Sep 22, 2015 5:24:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/**\r\n   * Reads a Factor history from each file\r\n   */\r\n  def readFactorHistory(file: File): Array[(DateTime, Double)] \u003d {\r\n    val format \u003d new SimpleDateFormat(\"yyyy-MM-dd\")\r\n    val lines \u003d Source.fromFile(file).getLines().toSeq\r\n    lines.tail.map(line \u003d\u003e {\r\n      val cols \u003d line.split(\u0027,\u0027)\r\n      val date \u003d new DateTime(format.parse(cols(0)))\r\n      val value \u003d cols(1).toDouble\r\n      (date, value)\r\n    }).reverse.toArray\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:24:30 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440227021627_-2122451260",
      "id": "20150822-070341_1509994023",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "readFactorHistory: (file: java.io.File)Array[(com.github.nscala_time.time.Imports.DateTime, Double)]\n"
      },
      "dateCreated": "Sep 22, 2015 7:03:41 AM",
      "dateStarted": "Sep 22, 2015 5:24:30 PM",
      "dateFinished": "Sep 22, 2015 5:24:30 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/**\r\n   * Reads a all the Stock histories\r\n  */\r\ndef readAllStockHistories(dir: File): Seq[Array[(String ,DateTime, Double)]] \u003d {\r\n    val files \u003d dir.listFiles()\r\n    files.flatMap(file \u003d\u003e {\r\n      try {\r\n        Some(readStockHistory(file))\r\n      } catch {\r\n        case e: Exception \u003d\u003e None\r\n      }\r\n    })\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:24:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440226255290_-1809350499",
      "id": "20150822-065055_2099771075",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "readAllStockHistories: (dir: java.io.File)Seq[Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]]\n"
      },
      "dateCreated": "Sep 22, 2015 6:50:55 AM",
      "dateStarted": "Sep 22, 2015 5:24:33 PM",
      "dateFinished": "Sep 22, 2015 5:24:34 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "   // Declare Time range\r\n    val start \u003d new DateTime(2000, 2, 13, 0, 0)\r\n    val end \u003d new DateTime(2015, 8, 7, 0, 0)\r\n  \r\n  val rawStocks \u003d readAllStockHistories(new File(\"/home/hadoop/MonteCarloData/data/stocks/\")).filter(_.size \u003e\u003d 260*5+10)\r\n \r\n",
      "dateUpdated": "Dec 3, 2015 1:03:29 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440043162910_-1502304612",
      "id": "20150820-035922_1249938653",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "start: org.joda.time.DateTime \u003d 2000-02-13T00:00:00.000Z\nend: org.joda.time.DateTime \u003d 2015-08-07T00:00:00.000Z\nrawStocks: Seq[Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]] \u003d ArraySeq(Array((MSFT,1986-03-13T00:00:00.000Z,25.499521), (MSFT,1986-03-14T00:00:00.000Z,27.999361), (MSFT,1986-03-17T00:00:00.000Z,28.99872), (MSFT,1986-03-18T00:00:00.000Z,29.49984), (MSFT,1986-03-19T00:00:00.000Z,28.75104), (MSFT,1986-03-20T00:00:00.000Z,28.24992), (MSFT,1986-03-21T00:00:00.000Z,27.50112), (MSFT,1986-03-24T00:00:00.000Z,26.749441), (MSFT,1986-03-25T00:00:00.000Z,26.000639), (MSFT,1986-03-26T00:00:00.000Z,26.49888), (MSFT,1986-03-27T00:00:00.000Z,27.250559), (MSFT,1986-03-31T00:00:00.000Z,27.7488), (MSFT,1986-04-01T00:00:00.000Z,27.50112), (MSFT,1986-04-02T00:00:00.000Z,27.250559), (MSFT,1986-04-03T00:00:00.000Z,27.7488), (MSFT,1986-04-04T00:00:00.000Z,27.7488), (MSFT,1986-04-07T00..."
      },
      "dateCreated": "Sep 20, 2015 3:59:22 AM",
      "dateStarted": "Sep 22, 2015 5:24:36 PM",
      "dateFinished": "Sep 22, 2015 5:24:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val rawStocksrdd \u003d sc.parallelize(rawStocks)",
      "dateUpdated": "Sep 22, 2015 5:24:43 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440043561833_261149550",
      "id": "20150820-040601_440919592",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "rawStocksrdd: org.apache.spark.rdd.RDD[Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]] \u003d ParallelCollectionRDD[5567] at parallelize at \u003cconsole\u003e:184\n"
      },
      "dateCreated": "Sep 20, 2015 4:06:01 AM",
      "dateStarted": "Sep 22, 2015 5:24:43 PM",
      "dateFinished": "Sep 22, 2015 5:24:44 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "rawStocks.length",
      "dateUpdated": "Sep 22, 2015 5:25:22 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440043683036_1286321479",
      "id": "20150820-040803_1483656492",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res377: Int \u003d 4\n"
      },
      "dateCreated": "Sep 20, 2015 4:08:03 AM",
      "dateStarted": "Sep 22, 2015 5:25:22 PM",
      "dateFinished": "Sep 22, 2015 5:25:23 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val stocks \u003d rawStocksrdd.map(trimToRegion(_,start, end)).map(fillInHistory(_,start, end))",
      "dateUpdated": "Sep 22, 2015 5:25:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440045065018_-1016411079",
      "id": "20150820-043105_2033499515",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "stocks: org.apache.spark.rdd.RDD[Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]] \u003d MapPartitionsRDD[5569] at map at \u003cconsole\u003e:198\n"
      },
      "dateCreated": "Sep 20, 2015 4:31:05 AM",
      "dateStarted": "Sep 22, 2015 5:25:25 PM",
      "dateFinished": "Sep 22, 2015 5:25:26 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "stocks.count",
      "dateUpdated": "Sep 22, 2015 5:25:28 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440225621956_-2029513881",
      "id": "20150822-064021_49214590",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res380: Long \u003d 4\n"
      },
      "dateCreated": "Sep 22, 2015 6:40:21 AM",
      "dateStarted": "Sep 22, 2015 5:25:28 PM",
      "dateFinished": "Sep 22, 2015 5:25:30 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def valueReturns(history: Array[(String,DateTime, Double)]): Array[(String,Double)] \u003d {\r\n    history.sliding(slidingWindow.getOrElse(0)).map { window \u003d\u003e\r\n      val next \u003d window.last._3\r\n      val prev \u003d window.head._3\r\n      (window.head._1,((next - prev) / prev))\r\n    }.toArray\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:25:32 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440045866428_20760276",
      "id": "20150820-044426_415069936",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "valueReturns: (history: Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)])Array[(String, Double)]\n"
      },
      "dateCreated": "Sep 20, 2015 4:44:26 AM",
      "dateStarted": "Sep 22, 2015 5:25:32 PM",
      "dateFinished": "Sep 22, 2015 5:25:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val stocksReturns \u003d stocks.map(valueReturns)",
      "dateUpdated": "Sep 22, 2015 5:25:35 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440083640204_759009325",
      "id": "20150820-151400_1451910999",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "stocksReturns: org.apache.spark.rdd.RDD[Array[(String, Double)]] \u003d MapPartitionsRDD[5570] at map at \u003cconsole\u003e:208\n"
      },
      "dateCreated": "Sep 20, 2015 3:14:00 PM",
      "dateStarted": "Sep 22, 2015 5:25:35 PM",
      "dateFinished": "Sep 22, 2015 5:25:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "stocksReturns.collect",
      "dateUpdated": "Sep 22, 2015 5:25:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440084931849_341795377",
      "id": "20150820-153531_976213793",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res384: Array[Array[(String, Double)]] \u003d Array(Array((MSFT,-0.06899220198734253), (MSFT,-0.06467054775253576), (MSFT,-0.09523809523809523), (MSFT,-0.07556675062972293), (MSFT,-0.0901015228426396), (MSFT,-0.081875), (MSFT,-0.0525), (MSFT,0.009198423127463863), (MSFT,0.02807486631016043), (MSFT,-0.004641909814323607), (MSFT,0.006600660066006601), (MSFT,0.10318559556786704), (MSFT,0.06403269754768393), (MSFT,0.100418410041841), (MSFT,0.029952348536419333), (MSFT,0.012532981530343008), (MSFT,-0.0078125), (MSFT,0.027308192457737322), (MSFT,0.0313124583610926), (MSFT,0.07868852459016394), (MSFT,0.07281858129315756), (MSFT,0.15364916773367476), (MSFT,0.0926805272496832), (MSFT,0.09583608724388631), (MSFT,0.09641693811074918), (MSFT,0.11482939632545931), (MSFT,0.07341772151898734), (MSFT,-0.023..."
      },
      "dateCreated": "Sep 20, 2015 3:35:31 PM",
      "dateStarted": "Sep 22, 2015 5:25:37 PM",
      "dateFinished": "Sep 22, 2015 5:25:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n//Load Factors\nval factorsPrefix \u003d \"/home/hadoop/MonteCarloData/data/factors/\"\nval factors1 \u003d Array(\"NDX.csv\",\"SNP.csv\").\n      map(x \u003d\u003e new File(factorsPrefix + x)).\n      map(readStockHistory)\n      \nval fctors \u003d factors1.\n      map(trimToRegion(_, start, end)).\n      map(fillInHistory(_, start, end))      \n      \n     ",
      "dateUpdated": "Dec 3, 2015 1:03:59 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440084972086_1857382592",
      "id": "20150820-153612_507986478",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factorsPrefix: String \u003d /home/hadoop/data/factors/\nfactors1: Array[Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]] \u003d Array(Array((NDX,1985-01-31T00:00:00.000Z,125.0), (NDX,1985-02-28T00:00:00.000Z,123.52), (NDX,1985-03-25T00:00:00.000Z,115.02), (NDX,1985-03-26T00:00:00.000Z,115.25), (NDX,1985-03-27T00:00:00.000Z,116.38), (NDX,1985-03-28T00:00:00.000Z,116.39), (NDX,1985-03-29T00:00:00.000Z,117.36), (NDX,1985-04-23T00:00:00.000Z,117.66), (NDX,1985-04-24T00:00:00.000Z,117.64), (NDX,1985-04-25T00:00:00.000Z,118.16), (NDX,1985-04-26T00:00:00.000Z,117.84), (NDX,1985-04-29T00:00:00.000Z,116.23), (NDX,1985-04-30T00:00:00.000Z,115.38), (NDX,1985-05-23T00:00:00.000Z,121.3), (NDX,1985-05-24T00:00:00.000Z,121.05), (NDX,1985-05-31T00:00:00.000Z,119.64), (NDX,1985-06-24T00:00:00.000Z,117.3), (NDX,1985-06-25T00:00:00.000Z,119.64...fctors: Array[Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]] \u003d Array(Array((NDX,2000-02-13T00:00:00.000Z,3986.13), (NDX,2000-02-14T00:00:00.000Z,3986.13), (NDX,2000-02-15T00:00:00.000Z,3997.03), (NDX,2000-02-16T00:00:00.000Z,3997.97), (NDX,2000-02-17T00:00:00.000Z,4125.38), (NDX,2000-02-18T00:00:00.000Z,3965.75), (NDX,2000-02-21T00:00:00.000Z,3965.75), (NDX,2000-02-22T00:00:00.000Z,3969.13), (NDX,2000-02-23T00:00:00.000Z,4170.09), (NDX,2000-02-24T00:00:00.000Z,4253.05), (NDX,2000-02-25T00:00:00.000Z,4178.58), (NDX,2000-02-28T00:00:00.000Z,4162.13), (NDX,2000-02-29T00:00:00.000Z,4266.94), (NDX,2000-03-01T00:00:00.000Z,4309.01), (NDX,2000-03-02T00:00:00.000Z,4234.26), (NDX,2000-03-03T00:00:00.000Z,4442.87), (NDX,2000-03-06T00:00:00.000Z,4457.18), (NDX,2000-03-07T00..."
      },
      "dateCreated": "Sep 20, 2015 3:36:12 PM",
      "dateStarted": "Sep 22, 2015 5:25:41 PM",
      "dateFinished": "Sep 22, 2015 5:25:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val factors \u003d sc.parallelize(fctors) ",
      "dateUpdated": "Sep 22, 2015 5:25:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440085684553_-531863750",
      "id": "20150820-154804_1400795508",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factors: org.apache.spark.rdd.RDD[Array[(String, com.github.nscala_time.time.Imports.DateTime, Double)]] \u003d ParallelCollectionRDD[5571] at parallelize at \u003cconsole\u003e:198\n"
      },
      "dateCreated": "Sep 20, 2015 3:48:04 PM",
      "dateStarted": "Sep 22, 2015 5:25:47 PM",
      "dateFinished": "Sep 22, 2015 5:25:48 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val factorsReturns \u003d factors.map(valueReturns)",
      "dateUpdated": "Sep 22, 2015 5:25:51 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440085725681_-30707788",
      "id": "20150820-154845_2039794982",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factorsReturns: org.apache.spark.rdd.RDD[Array[(String, Double)]] \u003d MapPartitionsRDD[5572] at map at \u003cconsole\u003e:208\n"
      },
      "dateCreated": "Sep 20, 2015 3:48:45 PM",
      "dateStarted": "Sep 22, 2015 5:25:51 PM",
      "dateFinished": "Sep 22, 2015 5:25:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val temp1 \u003d factorsReturns.flatMap { arrayElement \u003d\u003e\r\n  arrayElement filter {\r\n    case (x: String, y:Double) \u003d\u003e x \u003d\u003d \"NDX\"\r\n  }\r\n}\r\n\r\n\r\nval temp2 \u003d factorsReturns.flatMap { arrayElement \u003d\u003e\r\n  arrayElement filter {\r\n    case (x: String, y:Double) \u003d\u003e x \u003d\u003d \"SNP\"\r\n  }\r\n}",
      "dateUpdated": "Sep 22, 2015 5:25:53 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440085758161_160558388",
      "id": "20150820-154918_960667021",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "temp1: org.apache.spark.rdd.RDD[(String, Double)] \u003d MapPartitionsRDD[5573] at flatMap at \u003cconsole\u003e:210\ntemp2: org.apache.spark.rdd.RDD[(String, Double)] \u003d MapPartitionsRDD[5574] at flatMap at \u003cconsole\u003e:212\n"
      },
      "dateCreated": "Sep 20, 2015 3:49:18 PM",
      "dateStarted": "Sep 22, 2015 5:25:53 PM",
      "dateFinished": "Sep 22, 2015 5:25:54 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "    val factor1 \u003d temp1.map(x \u003d\u003e x._2).toArray\n    val factor2 \u003d temp2.map(x \u003d\u003e x._2).toArray\n\n",
      "dateUpdated": "Sep 22, 2015 5:25:57 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440085786872_2032239193",
      "id": "20150820-154946_463634023",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "warning: there were 1 deprecation warning(s); re-run with -deprecation for details\nfactor1: Array[Double] \u003d Array(0.06696219139867492, 0.04827991058997068, 0.04130566945957371, 0.0672766428962698, 0.04451226311273146, 0.06770724327050374, 0.12031015570825188, 0.1229614550291878, 0.052934109335769676, 0.04529220206675212, 0.09756424431266131, 0.10211838649922028, 0.037464787412056555, -0.019034534614679573, -0.024620594861912117, -0.020153639426766925, -0.003753494361906064, -0.029534279395922933, 8.210217559517635E-4, 0.002300349304226141, 0.01601426590744601, 0.05981973434535093, 0.11302132250135434, 0.10977697390563221, 0.013918081101134109, -0.04284700874911332, 0.032078194853502114, -0.08367776721438958, -0.12239792377757625, -0.13525239131274372, -0.12892802257647154, -0.08782650651578303, -0.12766314889197736, -0.11434507195418132, -0.14506645585256178, -0.17376...warning: there were 1 deprecation warning(s); re-run with -deprecation for details\nfactor2: Array[Double] \u003d Array(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0..."
      },
      "dateCreated": "Sep 20, 2015 3:49:46 PM",
      "dateStarted": "Sep 22, 2015 5:25:57 PM",
      "dateFinished": "Sep 22, 2015 5:25:58 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "temp2.collect.foreach(println)",
      "dateUpdated": "Sep 22, 2015 5:26:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440250914229_1926290493",
      "id": "20150822-134154_1698068349",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,0.0)\n(SNP,-0.030302505784971345)\n(SNP,-0.0242421403855924)\n(SNP,-0.04848481410467331)\n(SNP,-0.07878790170799564)\n(SNP,-0.12727271581266897)\n(SNP,-0.12727271581266897)\n(SNP,-0.10303004209358804)\n(SNP,-0.0818177692560784)\n(SNP,-0.0545452279889149)\n(SNP,0.006249748437562811)\n(SNP,0.00931672049689436)\n(SNP,0.04140128443344827)\n(SNP,0.12171077527708696)\n(SNP,0.19097210860336356)\n(SNP,0.15972232214508955)\n(SNP,0.10810800000000008)\n(SNP,0.06270610227758118)\n(SNP,0.012820718606190728)\n(SNP,0.0031057888198758044)\n(SNP,0.006153649533718103)\n(SNP,-0.0061160137286883475)\n(SNP,-0.02052795500555599)\n(SNP,-0.03206951634081078)\n(SNP,-0.017963979490103758)\n(SNP,-0.02743883194525204)\n(SNP,-0.00931667080745349)\n(SNP,-0.025316806280991457)\n(SNP,-0.021671871866873735)\n(SNP,-0.06421985668987319)\n(SNP,-0.15076928742248788)\n(SNP,-0.17065838000639616)\n(SNP,-0.14457820293222132)\n(SNP,-0.1128050841761058)\n(SNP,-0.09404407834040579)\n(SNP,-0.07210040656046071)\n(SNP,-0.055194920559983415)\n(SNP,-0.07911436772946306)\n(SNP,-0.06209139219959287)\n(SNP,0.03260852551982887)\n(SNP,0.04693139980972134)\n(SNP,0.007041970244062954)\n(SNP,-0.024054440925176408)\n(SNP,-0.04844307802829946)\n(SNP,-0.13851324324324327)\n(SNP,-0.1615116958938929)\n(SNP,-0.17525762482725768)\n(SNP,-0.1742163235197049)\n(SNP,-0.1684209314865772)\n(SNP,-0.18275886630198074)\n(SNP,-0.16433595324956382)\n(SNP,-0.14436661535400222)\n(SNP,-0.11272695642966002)\n(SNP,-0.04313749234902205)\n(SNP,0.004098557108291423)\n(SNP,0.004167000833400154)\n(SNP,0.07594984991727932)\n(SNP,0.06329087774391595)\n(SNP,0.054852328081327)\n(SNP,0.04602539087212357)\n(SNP,0.03703691510437269)\n(SNP,-0.016393703843035734)\n(SNP,-0.012295015587212027)\n(SNP,-0.016326656959567178)\n(SNP,-0.04564354580666617)\n(SNP,-0.06666677124179728)\n(SNP,-0.047618875283380976)\n(SNP,-0.02800013158401686)\n(SNP,-0.02800013158401686)\n(SNP,-0.047618875283380976)\n(SNP,-0.0041668675000402534)\n(SNP,-0.012448064737186475)\n(SNP,-0.004149708992569748)\n(SNP,0.03443493132102446)\n(SNP,-0.009076031782985109)\n(SNP,-0.04000014133336159)\n(SNP,-0.051851931351948925)\n(SNP,-0.048559815258552116)\n(SNP,-0.04666654266664192)\n(SNP,-0.05271895004610539)\n(SNP,-0.08773141087769862)\n(SNP,-0.06666661333332272)\n(SNP,0.01210470909276507)\n(SNP,0.07191365100006457)\n(SNP,0.10902857952381227)\n(SNP,0.07291738642964808)\n(SNP,0.06712853998416878)\n(SNP,0.0804200056237767)\n(SNP,0.09187275905556222)\n(SNP,0.21960231681684858)\n(SNP,0.1500005214286459)\n(SNP,0.0558145035928584)\n(SNP,0.04303739416774827)\n(SNP,0.060112500896994)\n(SNP,0.09708682942173798)\n(SNP,0.03761316228189611)\n(SNP,-0.023301545857105)\n(SNP,-0.009709187796379382)\n(SNP,-0.07552887761154825)\n(SNP,-0.01801266521345799)\n(SNP,-0.005663875582654113)\n(SNP,-0.06492659736850642)\n(SNP,-0.1258120273221451)\n(SNP,-0.1386428563969657)\n(SNP,-0.08437489609372399)\n(SNP,-0.02716992105233158)\n(SNP,-0.039215822119715305)\n(SNP,-0.055555824255663314)\n(SNP,-0.05629379783087935)\n(SNP,-0.06645624899841793)\n(SNP,-0.04931906251814973)\n(SNP,-0.012162901296317153)\n(SNP,0.01369890317130799)\n(SNP,0.003412833230420948)\n(SNP,-0.025885759416109093)\n(SNP,-0.003401225415299462)\n(SNP,0.051903758575955146)\n(SNP,0.04557662079802173)\n(SNP,0.07118707497866944)\n(SNP,0.06825932672482281)\n(SNP,0.019152401840931022)\n(SNP,0.023648573091698186)\n(SNP,0.0034012934425288062)\n(SNP,0.0412590937943422)\n(SNP,0.003412833230420948)\n(SNP,-0.01973690399929526)\n(SNP,-0.06410244000656665)\n(SNP,-0.07594953773429418)\n(SNP,-0.06709240902729886)\n(SNP,0.0)\n(SNP,0.07260691152292764)\n(SNP,0.11186437690317856)\n(SNP,0.08797835111394209)\n(SNP,0.155102423157122)\n(SNP,0.14765112112065473)\n(SNP,0.19451998667671327)\n(SNP,0.1958903290486076)\n(SNP,0.21232827312820043)\n(SNP,0.22147627899647246)\n(SNP,0.081846405036702)\n(SNP,0.11280510224576917)\n(SNP,0.049382277854039584)\n(SNP,0.001767078812303908)\n(SNP,-0.008772337129277788)\n(SNP,-0.005160437851093252)\n(SNP,0.008018155784650486)\n(SNP,-0.0028248032174474002)\n(SNP,-0.010989231373034683)\n(SNP,0.03242314577534482)\n(SNP,-0.002739616888704267)\n(SNP,0.1029417361593343)\n(SNP,0.0987647505826864)\n(SNP,0.12094379721719131)\n(SNP,0.10662844571424954)\n(SNP,0.10511393837169422)\n(SNP,0.0991506796460848)\n(SNP,0.12500003472223187)\n(SNP,0.15151474914438026)\n(SNP,0.14835143672260656)\n(SNP,0.053333268622235974)\n(SNP,0.019797009041468448)\n(SNP,-0.005263001662000624)\n(SNP,0.041667035590316245)\n(SNP,0.07969166275664137)\n(SNP,0.06958751142525535)\n(SNP,-0.012345188233379654)\n(SNP,-0.043061732789888174)\n(SNP,-0.07990399040765328)\n(SNP,-0.005063746066266421)\n(SNP,0.023084888610446518)\n(SNP,0.021163918703267524)\n(SNP,-0.062000234499941374)\n(SNP,-0.11904782879813607)\n(SNP,-0.126747168506297)\n(SNP,-0.07750008062497997)\n(SNP,-0.06650018337495427)\n(SNP,-0.011960893191794676)\n(SNP,0.016794152710682755)\n(SNP,0.058974669691008764)\n(SNP,0.03367876520175275)\n(SNP,0.06076737739872068)\n(SNP,0.03783772972972977)\n(SNP,0.09271535239683812)\n(SNP,0.07479679000594201)\n(SNP,0.06588082132400541)\n(SNP,0.04736854127427622)\n(SNP,-0.04654629862594078)\n(SNP,-0.07506061136546936)\n(SNP,-0.04761910967897487)\n(SNP,-0.04020066134686663)\n(SNP,-0.013020990939686531)\n(SNP,-0.032828282828282936)\n(SNP,-0.041856269923092194)\n(SNP,-0.08492458993459094)\n(SNP,-0.1281407795257849)\n(SNP,-0.0944884840969062)\n(SNP,-0.12146631600005509)\n(SNP,-0.11578898393336333)\n(SNP,-0.11623019116803276)\n(SNP,-0.07651680119176826)\n(SNP,-0.07571832898172316)\n(SNP,-0.07631555041543704)\n(SNP,-0.04063696441026327)\n(SNP,0.0028824215799486013)\n(SNP,-0.005796812266297064)\n(SNP,0.031585049245542014)\n(SNP,0.02916642162704234)\n(SNP,0.007108350553903641)\n(SNP,-0.07999981942859202)\n(SNP,-0.09039488939939758)\n(SNP,-0.09458667205622061)\n(SNP,-0.08986818430087976)\n(SNP,-0.10229951083347395)\n(SNP,-0.06705579001939546)\n(SNP,-0.05257073183102958)\n(SNP,-0.025448120300751834)\n(SNP,-0.029411302768030164)\n(SNP,0.022359993055902708)\n(SNP,-0.0031062102154626866)\n(SNP,0.008810382225856159)\n(SNP,0.005031509117515219)\n(SNP,-0.030088937939984992)\n(SNP,-0.03937450984362744)\n(SNP,-0.056707032941597416)\n(SNP,-0.11750764183885552)\n(SNP,-0.109091313498549)\n(SNP,-0.10206572891459717)\n(SNP,-0.09034233343997917)\n(SNP,-0.0892076731129133)\n(SNP,-0.123905115906744)\n(SNP,-0.06138651844580363)\n(SNP,-0.056603758853933886)\n(SNP,-0.06270168472538357)\n(SNP,-0.056489314927950965)\n(SNP,-0.04557783553138388)\n(SNP,-0.050744049441410685)\n(SNP,-0.039041024723217556)\n(SNP,-0.039041024723217556)\n(SNP,-0.06071458010208289)\n(SNP,-0.07172954595352267)\n(SNP,-0.0855175626158448)\n(SNP,-0.09310411224714152)\n(SNP,-0.07697789351705012)\n(SNP,0.019244259551780538)\n(SNP,0.015680682012732476)\n(SNP,-0.03777597465773703)\n(SNP,-0.030648605752158817)\n(SNP,0.053232723908467235)\n(SNP,0.06818111570269221)\n(SNP,0.04826576532924318)\n(SNP,0.08973456565835697)\n(SNP,0.10424685648697199)\n(SNP,-0.0034962939507897453)\n(SNP,-0.014035506802034142)\n(SNP,0.059258792867113746)\n(SNP,0.04411778762973711)\n(SNP,0.029602446324203176)\n(SNP,0.0)\n(SNP,0.010071724444951505)\n(SNP,-0.04047507875608954)\n(SNP,-0.04895084258397499)\n(SNP,-0.052631361034194975)\n(SNP,-0.03914527804847776)\n(SNP,-0.045454548633185245)\n(SNP,0.021126754612181848)\n(SNP,0.0343616457730219)\n(SNP,0.06737591041698945)\n(SNP,0.02920185185185193)\n(SNP,0.06909100694218437)\n(SNP,0.11617593879765606)\n(SNP,0.1474064639235319)\n(SNP,0.151110981070007)\n(SNP,0.13186858108927346)\n(SNP,0.04482757384066918)\n(SNP,0.02711926343025872)\n(SNP,-0.001992691691924133)\n(SNP,0.039447144407118724)\n(SNP,0.025170483039587226)\n(SNP,0.008563968565207039)\n(SNP,-0.020012791484153688)\n(SNP,-0.01866170690818358)\n(SNP,-0.04530807595207902)\n(SNP,-0.06270625407095598)\n(SNP,-0.05214579481299144)\n(SNP,-0.04993400468242178)\n(SNP,-0.03328933645494786)\n(SNP,-0.03649654459236304)\n(SNP,-0.03265794452199726)\n(SNP,-0.017786369494851614)\n(SNP,-0.03278727653853918)\n(SNP,-0.04067730192450913)\n(SNP,0.007041899424817052)\n(SNP,0.006267342015091273)\n(SNP,0.02312579484955706)\n(SNP,0.01859476712085166)\n(SNP,0.008264669990679787)\n(SNP,-0.0202566468082417)\n(SNP,-0.04761865159203912)\n(SNP,-0.05423689974132194)\n(SNP,-0.0063611991656540405)\n(SNP,0.008391818768658693)\n(SNP,-0.03114160462627185)\n(SNP,-0.08150732318443)\n(SNP,-0.0926295783061454)\n(SNP,-0.09494527391458014)\n(SNP,-0.09510694760758814)\n(SNP,-0.06478948879169334)\n(SNP,-0.02867361801622816)\n(SNP,-0.04338543814456821)\n(SNP,-0.06726815987958952)\n(SNP,-0.0392859341837049)\n(SNP,0.011186134758897074)\n(SNP,0.02160886092135284)\n(SNP,0.027923993677586405)\n(SNP,0.03731881188118809)\n(SNP,0.026356414495098048)\n(SNP,0.02214021486635729)\n(SNP,0.07806761266454011)\n(SNP,0.07881095866578394)\n(SNP,0.08104166581474576)\n(SNP,0.05604668141592918)\n(SNP,-7.292489895145481E-4)\n(SNP,-0.0014679886836971546)\n(SNP,-0.008809914481619571)\n(SNP,0.007336387085963119)\n(SNP,-0.007220864340544596)\n(SNP,-0.04413805678950163)\n(SNP,-0.053067049887381194)\n(SNP,-0.05502102647144905)\n(SNP,-0.02932892495129015)\n(SNP,-0.013138543023038577)\n(SNP,0.019117644247405242)\n(SNP,0.0533327950619278)\n(SNP,0.04515629678395511)\n(SNP,0.047272744462816194)\n(SNP,0.05699826017341126)\n(SNP,0.07350772005150809)\n(SNP,0.07860262580805139)\n(SNP,0.06115049039917476)\n(SNP,0.09319527316533084)\n(SNP,0.05844183860868137)\n(SNP,0.02953615042702541)\n(SNP,0.01533101365805168)\n(SNP,0.01875077039957307)\n(SNP,0.010239387063397581)\n(SNP,-0.004745289744166028)\n(SNP,0.002024629016506745)\n(SNP,0.0223732279231281)\n(SNP,0.02029776862637135)\n(SNP,0.06339417993421403)\n(SNP,0.08606549370689967)\n(SNP,0.10363777013818191)\n(SNP,0.04294422238136778)\n(SNP,0.03378329939753398)\n(SNP,0.04904583800465426)\n(SNP,0.045790560056414804)\n(SNP,0.05039820954907159)\n(SNP,0.042440450928381904)\n(SNP,-0.0025641668310363466)\n(SNP,-0.007547358015889355)\n(SNP,-0.015547513404696142)\n(SNP,0.065359420308421)\n(SNP,0.07843170959891622)\n(SNP,0.058441707286268636)\n(SNP,0.054733182768776256)\n(SNP,0.04797934091561207)\n(SNP,0.04198460025641217)\n(SNP,0.0700512943510662)\n(SNP,0.057034354503720394)\n(SNP,0.05432737028659841)\n(SNP,0.012270309006805237)\n(SNP,-0.02909090380165388)\n(SNP,-0.012269450110941844)\n(SNP,-0.004884188034187902)\n(SNP,-0.03493946204089906)\n(SNP,-0.022588888888888894)\n(SNP,-0.03303250042822845)\n(SNP,-0.03477188249400481)\n(SNP,-0.023367290000112076)\n(SNP,0.0)\n(SNP,0.05617914054073539)\n(SNP,0.05652178368888713)\n(SNP,0.05337424295231449)\n(SNP,0.07989967292765184)\n(SNP,0.08931914652810004)\n(SNP,0.0739127099649969)\n(SNP,0.06956451255760482)\n(SNP,0.04662620490052839)\n(SNP,0.07575762258952323)\n(SNP,0.0490550439353018)\n(SNP,0.06407981278783781)\n(SNP,0.09726297564291944)\n(SNP,0.052023306826198)\n(SNP,0.017201899106266738)\n(SNP,0.03585864661654138)\n(SNP,0.03252039460640926)\n(SNP,0.0023446653353656395)\n(SNP,-0.03943717421134096)\n(SNP,-0.047887594842232116)\n(SNP,-0.12707179512225517)\n(SNP,-0.15605099192664623)\n(SNP,-0.12087929235600502)\n(SNP,-0.09526491384382657)\n(SNP,-0.10050214416574971)\n(SNP,-0.10011245784939761)\n(SNP,-0.07017559761974318)\n(SNP,-0.03225754800852142)\n(SNP,-0.04437840499280514)\n(SNP,0.006961580516055637)\n(SNP,0.0251569795498756)\n(SNP,0.012500378125094651)\n(SNP,0.01682305820032961)\n(SNP,-6.206082022454936E-4)\n(SNP,0.009375502343875568)\n(SNP,0.02201245144575773)\n(SNP,-0.010908967713521095)\n(SNP,0.0037147978415361174)\n(SNP,0.0157135793300275)\n(SNP,-0.008588774586891092)\n(SNP,-0.009259690214853197)\n(SNP,-0.018382469858311885)\n(SNP,-0.018633596697640774)\n(SNP,0.02476760996467881)\n(SNP,0.024615201514781793)\n(SNP,0.026348031143373016)\n(SNP,0.028994574829682332)\n(SNP,0.07116293316831673)\n(SNP,0.07549498762376246)\n(SNP,0.09345822226112847)\n(SNP,0.09862632360306045)\n(SNP,0.1139235787535243)\n(SNP,0.075528817188591)\n(SNP,0.06966986658735531)\n(SNP,0.0328352737805152)\n(SNP,0.03896882494004788)\n(SNP,-0.008087582704395087)\n(SNP,-0.013233372453013367)\n(SNP,-0.00284883207115859)\n(SNP,-0.005113580417087505)\n(SNP,0.0011368183755940807)\n(SNP,-0.028090276164560203)\n(SNP,-0.0387422817935027)\n(SNP,0.017341102275399266)\n(SNP,0.027120773225620426)\n(SNP,0.008736518707603804)\n(SNP,0.02915404737830068)\n(SNP,0.008571027591882678)\n(SNP,0.022843977480751287)\n(SNP,0.021565828159526595)\n(SNP,0.03757226302248848)\n(SNP,0.05198633481228589)\n(SNP,0.01704551426912185)\n(SNP,0.016853985923485415)\n(SNP,0.039260501282823025)\n(SNP,0.003966290075436187)\n(SNP,-0.045325395276315975)\n(SNP,-0.09603530899727734)\n(SNP,-0.12055558904321909)\n(SNP,-0.1559884470169241)\n(SNP,-0.17823426478782206)\n(SNP,-0.16759756062542575)\n(SNP,-0.1541440543328056)\n(SNP,-0.1833333287037023)\n(SNP,-0.1647852708803611)\n(SNP,-0.08842776398483511)\n(SNP,-0.0024706602913747984)\n(SNP,-0.013266081259027633)\n(SNP,0.018481513272207806)\n(SNP,0.016891210509726085)\n(SNP,-0.010067582541264117)\n(SNP,-0.016982434221406773)\n(SNP,0.02244932583655124)\n(SNP,0.12162110756043655)\n(SNP,-0.023437313842700713)\n(SNP,-0.02786432746394364)\n(SNP,-0.001280026181829834)\n(SNP,0.0045369413180130535)\n(SNP,0.02259150252209387)\n(SNP,0.06779656535476784)\n(SNP,0.07641245063536581)\n(SNP,0.07119121282826256)\n(SNP,-0.02891560589344646)\n(SNP,0.06333341266668255)\n(SNP,0.027388607448601034)\n(SNP,0.04166666933760692)\n(SNP,-0.011612771196704286)\n(SNP,6.49642751717319E-4)\n(SNP,-0.0349200767949498)\n(SNP,-0.06172832571255242)\n(SNP,-0.03416166640942039)\n(SNP,-0.043424196242195845)\n(SNP,-0.04388696475071668)\n(SNP,-0.043397220929254916)\n(SNP,-0.036923202272196955)\n(SNP,0.022192484781011247)\n(SNP,0.03246793261945858)\n(SNP,0.05197347658418223)\n(SNP,0.01315736582420411)\n(SNP,-0.009646751170835776)\n(SNP,-0.020752722389576927)\n(SNP,-0.02491822787421447)\n(SNP,-0.014257940003755064)\n(SNP,-0.03194844062909415)\n(SNP,-0.03256648549376939)\n(SNP,-0.04088050057355345)\n(SNP,-0.043152095059412116)\n(SNP,0.022727215171173668)\n(SNP,0.026623774877848935)\n(SNP,0.03774908784731962)\n(SNP,0.04841991236313545)\n(SNP,0.05193931965413013)\n(SNP,0.05808552921834226)\n(SNP,0.03960328987371885)\n(SNP,-0.009836523945145883)\n(SNP,-0.026796996966927777)\n(SNP,-0.08571425487527161)\n(SNP,-0.06261871836693751)\n(SNP,-0.04403329801107273)\n(SNP,-0.03463803275971363)\n(SNP,-0.05937507734376936)\n(SNP,-0.05177772925764195)\n(SNP,-0.024126358397342843)\n(SNP,0.007947221700882712)\n(SNP,0.022162049116978073)\n(SNP,0.08680572458532106)\n(SNP,0.062078074364242564)\n(SNP,0.054739708663609714)\n(SNP,0.03322306751596928)\n(SNP,0.029900940166425402)\n(SNP,-0.007237301203164321)\n(SNP,-0.034483465326359056)\n(SNP,0.008541328884624716)\n(SNP,0.015769122687737787)\n(SNP,0.01980824660860954)\n(SNP,-0.021601085540301226)\n(SNP,-0.04367087502003161)\n(SNP,-0.01157543259479963)\n(SNP,0.0012899351509843954)\n(SNP,0.03379742446585149)\n(SNP,0.030997656130969917)\n(SNP,0.016286844635008343)\n(SNP,-0.0038814998936287292)\n(SNP,-0.016290793556589914)\n(SNP,0.022727215171173668)\n(SNP,0.07015180141580371)\n(SNP,0.04098840833092819)\n(SNP,0.003221521033701192)\n(SNP,0.02564083497697654)\n(SNP,0.019607911059857652)\n(SNP,-0.019230834566079137)\n(SNP,-0.0162331870886972)\n(SNP,-0.03503128504181054)\n(SNP,-0.022222167195746146)\n(SNP,-0.03648683197116045)\n(SNP,-0.015625128906282246)\n(SNP,0.008349327771182457)\n(SNP,-0.012499503124875778)\n(SNP,0.016025898463198542)\n(SNP,0.065359420308421)\n(SNP,0.0825075689748993)\n(SNP,0.09900934679621223)\n(SNP,0.12337672836906763)\n(SNP,0.08857435613311061)\n(SNP,0.08888949418012493)\n(SNP,0.11783468720849913)\n(SNP,0.10126586043902272)\n(SNP,0.09716036015892236)\n(SNP,0.06441706707062575)\n(SNP,0.036585440214185375)\n(SNP,0.021020966011042693)\n(SNP,-0.01734110227539947)\n(SNP,0.025943993497639647)\n(SNP,0.002915334766996755)\n(SNP,-0.04273476026978682)\n(SNP,-0.022413729191457104)\n(SNP,-0.02185101260811164)\n(SNP,-0.02017291647634489)\n(SNP,0.030588303114206836)\n(SNP,0.05882354671280786)\n(SNP,0.05294136851216731)\n(SNP,0.04310326347607374)\n(SNP,0.05755819432801192)\n(SNP,0.09821420280614204)\n(SNP,0.12286868093991267)\n(SNP,0.12874727968937813)\n(SNP,0.08941173217992136)\n(SNP,0.04737432588454928)\n(SNP,0.022222728395202375)\n(SNP,0.02793329921042444)\n(SNP,0.0)\n(SNP,0.015942329198204628)\n(SNP,-0.010840431841664111)\n(SNP,-0.04345538584470378)\n(SNP,-0.0677083403862855)\n(SNP,-0.017278353329920206)\n(SNP,-0.0027247420353379783)\n(SNP,-0.0027179341917534547)\n(SNP,-0.023913636105731193)\n(SNP,0.009366390152463792)\n(SNP,0.00378815078555486)\n(SNP,0.016438413661108996)\n(SNP,0.012588666505564658)\n(SNP,0.022346203614100908)\n(SNP,0.028022144396821182)\n(SNP,-0.008196341037251567)\n(SNP,-0.010354008835098103)\n(SNP,0.01113614019782752)\n(SNP,-0.012008623143163432)\n(SNP,-0.024258439273147105)\n(SNP,-0.029649760609138626)\n(SNP,-0.03189210810810813)\n(SNP,0.006011258473021553)\n(SNP,-0.01122405010966858)\n(SNP,0.027547820655887525)\n(SNP,0.035242514894549964)\n(SNP,0.052312836157801156)\n(SNP,0.05359087213461394)\n(SNP,0.033149219193542856)\n(SNP,0.047222457561793885)\n(SNP,0.06030152100536493)\n(SNP,0.028788537273843604)\n(SNP,-0.005405189189189236)\n(SNP,-0.03217105420135511)\n(SNP,-0.03723393220915619)\n(SNP,-0.05285165111730252)\n(SNP,-0.04824315932056413)\n(SNP,-0.021390903371416303)\n(SNP,0.0053048278676301715)\n(SNP,-0.023169989082672936)\n(SNP,-0.0073915530508503755)\n(SNP,-0.00543527055754988)\n(SNP,-0.05263161976963444)\n(SNP,-0.02762469002769282)\n(SNP,-0.016574637221074547)\n(SNP,0.0027546553438395007)\n(SNP,0.030054871599691765)\n(SNP,-0.004749236081592705)\n(SNP,0.02749342614484385)\n(SNP,0.0473399949638303)\n(SNP,0.08743177252234235)\n(SNP,0.19532153325812104)\n(SNP,0.10511393837169422)\n(SNP,0.0786513912385296)\n(SNP,0.04011000220384642)\n(SNP,-0.007957241801445162)\n(SNP,-0.019087860936563242)\n(SNP,-0.009443756062762074)\n(SNP,-0.04520021692236166)\n(SNP,-0.051758955127428195)\n(SNP,-0.06555772031931698)\n(SNP,-0.00359927983554978)\n(SNP,0.015625053710943)\n(SNP,0.03011082778072744)\n(SNP,0.042245817581332175)\n(SNP,0.06216183783783781)\n(SNP,0.02383453011103877)\n(SNP,0.013297977308725928)\n(SNP,0.006889297733178811)\n(SNP,-0.002094345220783536)\n(SNP,0.018059807649083128)\n(SNP,0.015384667455624062)\n(SNP,0.023076719132139562)\n(SNP,0.01334022438786815)\n(SNP,0.01017832371857212)\n(SNP,-0.02431464171312171)\n(SNP,-0.007874381548686405)\n(SNP,-0.004209948697878599)\n(SNP,-0.0031483209261111166)\n(SNP,-0.04510862775180635)\n(SNP,-0.05303010101010101)\n(SNP,-0.056641618205919474)\n(SNP,-0.02784835020025054)\n(SNP,-0.02015093402024514)\n(SNP,0.020148624625974148)\n(SNP,0.021163918703267524)\n(SNP,0.028012519024175817)\n(SNP,0.056842123213301975)\n(SNP,0.09872621032630473)\n(SNP,0.10399997781333803)\n(SNP,0.1105207519980745)\n(SNP,0.10156251057942814)\n(SNP,0.11311068245648502)\n(SNP,0.11642432432432447)\n(SNP,0.13212443837420693)\n(SNP,0.1311054878040629)\n(SNP,0.12002015538450862)\n(SNP,0.07487863287369409)\n(SNP,0.09178751849516555)\n(SNP,0.08612470959921281)\n(SNP,0.08652468903306747)\n(SNP,0.08314048888210417)\n(SNP,0.13594010503908655)\n(SNP,0.09107562308020561)\n(SNP,0.10227275413222657)\n(SNP,0.06714109089738475)\n(SNP,0.0337083716704258)\n(SNP,0.03761021125392618)\n(SNP,0.03964775155736774)\n(SNP,0.05961728886363999)\n(SNP,0.02771855365269337)\n(SNP,-0.010246025430002066)\n(SNP,0.023070555626724432)\n(SNP,-0.009484987735054119)\n(SNP,0.0020832499131978642)\n(SNP,0.052173427977379054)\n(SNP,0.019190151708761476)\n(SNP,0.004237075373500973)\n(SNP,-0.026694045174538075)\n(SNP,0.01659734646440004)\n(SNP,0.019875739104707864)\n(SNP,0.06191078310783102)\n(SNP,0.09908420460055073)\n(SNP,0.06652811087434968)\n(SNP,0.07851250529339006)\n(SNP,0.1087865835682216)\n(SNP,0.11814371308016877)\n(SNP,0.09282717299578058)\n(SNP,0.07346969446072907)\n(SNP,0.09825426672860742)\n(SNP,0.02007717836645902)\n(SNP,-0.034091065771373705)\n(SNP,-0.0077975048732942835)\n(SNP,-0.024904220284495033)\n(SNP,-0.030188974296835945)\n(SNP,0.0075468284799633896)\n(SNP,0.03088775584745086)\n(SNP,0.0380227756653992)\n(SNP,0.027726806318196854)\n(SNP,0.10711565778399032)\n(SNP,0.13333368888900043)\n(SNP,0.10844819845537097)\n(SNP,0.09194509043892106)\n(SNP,0.08754868385592861)\n(SNP,0.07490626309808202)\n(SNP,0.09363311913480742)\n(SNP,0.08058619342806565)\n(SNP,0.06043124595009077)\n(SNP,0.006837812199583388)\n(SNP,0.03287200692041524)\n(SNP,0.09181148528890458)\n(SNP,0.1173087610376051)\n(SNP,0.12915907438851795)\n(SNP,0.11846720246701108)\n(SNP,-0.04109602598986212)\n(SNP,-0.09322060384945051)\n(SNP,-0.05698742486218193)\n(SNP,-0.013582748118378936)\n(SNP,0.011725259238684796)\n(SNP,-0.01948058315061148)\n(SNP,-0.057971228733417986)\n(SNP,-0.06653977606777187)\n(SNP,-0.09999996261682485)\n(SNP,0.04285729030613824)\n(SNP,0.11401905361175031)\n(SNP,0.034172150898096894)\n(SNP,-0.06368294133496007)\n(SNP,-0.07781443708609274)\n(SNP,-0.05662271523178808)\n(SNP,-0.018803590386447494)\n(SNP,-0.03258642226748134)\n(SNP,-0.05503647749707746)\n(SNP,-0.10958910583598958)\n(SNP,-0.17785266665912752)\n(SNP,-0.13113043648846923)\n(SNP,-0.025735216803644618)\n(SNP,-0.025134574486955094)\n(SNP,-0.03474865596672284)\n(SNP,-0.041811472155708414)\n(SNP,-0.04385974823021076)\n(SNP,0.010989048021576915)\n(SNP,0.048077001849115536)\n(SNP,0.14081661166188897)\n(SNP,0.1557247033656094)\n(SNP,0.08792409330020534)\n(SNP,0.053406728528899744)\n(SNP,0.08363627570249527)\n(SNP,0.10545456264462495)\n(SNP,0.12587148161939507)\n(SNP,0.10326097826086947)\n(SNP,0.09724762945880258)\n(SNP,0.06976744435661708)\n(SNP,0.0720471202021338)\n(SNP,0.08220618838123274)\n(SNP,0.09790231111546542)\n(SNP,0.058724658517651775)\n(SNP,0.013157760560968245)\n(SNP,-0.05475890008992501)\n(SNP,-0.04105096475688356)\n(SNP,-0.019732609355605713)\n(SNP,0.0501674264270042)\n(SNP,0.05008091277559176)\n(SNP,0.05448705302843115)\n(SNP,0.05095543774594937)\n(SNP,0.08399357109309492)\n(SNP,0.07954518963992281)\n(SNP,0.12413787919143171)\n(SNP,0.1147258864819901)\n(SNP,0.11020148963524189)\n(SNP,0.027069740912461584)\n(SNP,-0.03384597027218377)\n(SNP,-0.062309887889040586)\n(SNP,-0.05000041515143963)\n(SNP,-0.07748530372592168)\n(SNP,-0.07368398322116995)\n(SNP,-0.055214488689783285)\n(SNP,-0.09370185195408771)\n(SNP,-0.10417932096433077)\n(SNP,-0.11627880872539664)\n(SNP,-0.07643339547238928)\n(SNP,-0.03565620745542957)\n(SNP,-0.04784661508047598)\n(SNP,-0.053882634160547324)\n(SNP,0.008117012459934275)\n(SNP,0.06331168420054008)\n(SNP,0.1355930755530118)\n(SNP,0.1698111602317448)\n(SNP,0.19298242905509755)\n(SNP,0.15862060808560105)\n(SNP,0.13277298162561726)\n(SNP,0.24288089638589958)\n(SNP,0.2512562394889033)\n(SNP,0.18679503636810885)\n(SNP,0.14503788427249564)\n(SNP,0.044776271329926697)\n(SNP,0.03401765395894424)\n(SNP,0.02941173183391398)\n(SNP,0.07886945095494519)\n(SNP,0.13649844482209686)\n(SNP,0.05795165045300827)\n(SNP,0.04417668005354755)\n(SNP,0.0461332787770137)\n(SNP,0.028000298560055672)\n(SNP,0.12428553220409731)\n(SNP,0.12308561411879668)\n(SNP,0.2048569824408301)\n(SNP,0.23034448601194718)\n(SNP,0.1644907006660391)\n(SNP,0.2585986110268222)\n(SNP,0.2769229814595636)\n(SNP,0.14785969931416873)\n(SNP,0.1258106484243166)\n(SNP,0.09529878744336362)\n(SNP,0.12373734536016807)\n(SNP,-0.03485897722831285)\n(SNP,-0.07623303545213407)\n(SNP,-0.11434956438896458)\n(SNP,-0.18016182915634937)\n(SNP,-0.2118472702657902)\n(SNP,-0.11299422490343278)\n(SNP,-0.005530091528791322)\n(SNP,0.02088141337527498)\n(SNP,-0.020224808988764106)\n(SNP,0.06019673958190902)\n(SNP,0.0024270629889775208)\n(SNP,0.0683543204614784)\n(SNP,0.006172567291598452)\n(SNP,0.008917171520144046)\n(SNP,0.006369502860152709)\n(SNP,-0.0813253030890941)\n(SNP,-0.1079543580836479)\n(SNP,-0.10435780773924835)\n(SNP,-0.09038238283279798)\n(SNP,0.004842760642331328)\n(SNP,0.020141966347346836)\n(SNP,0.01227011253719716)\n(SNP,0.03156570627359333)\n(SNP,0.045316323377680524)\n(SNP,0.05422459153151555)\n(SNP,0.06496820051117447)\n(SNP,0.11395660578300693)\n(SNP,0.11847120415433346)\n(SNP,-0.0024098793438640832)\n(SNP,-0.049941728212167844)\n(SNP,0.006060678787878777)\n(SNP,0.009791847506106647)\n(SNP,-0.01913286510050865)\n(SNP,-0.011961888807474843)\n(SNP,0.004545286646384082)\n(SNP,-0.04023009102919328)\n(SNP,-0.03872428510644314)\n(SNP,0.024154569301497113)\n(SNP,0.03129572050621709)\n(SNP,0.01807216736827702)\n(SNP,0.04484858181818178)\n(SNP,0.05679009315653401)\n(SNP,0.014527918730841579)\n(SNP,-0.0652535174032044)\n(SNP,-0.01317341569790004)\n(SNP,-0.028436136766916125)\n(SNP,-0.038915078097184405)\n(SNP,-0.027975346417766365)\n(SNP,-0.06390521012569045)\n(SNP,-0.0872390638293211)\n(SNP,-0.1413552471012677)\n(SNP,-0.10501210023866338)\n(SNP,-0.025477680230436738)\n(SNP,-0.10703892684277057)\n(SNP,-0.11951215800118623)\n(SNP,-0.14355830686891163)\n(SNP,-0.10975615704938121)\n(SNP,-0.03666265208627157)\n(SNP,-0.026436171835282195)\n(SNP,0.06122452033874953)\n(SNP,0.03733360696893982)\n(SNP,0.031372285121127955)\n(SNP,0.0695841027227021)\n(SNP,0.09889186143445225)\n(SNP,0.13667627383191738)\n(SNP,0.0917811109777168)\n(SNP,0.05039396986797499)\n(SNP,0.0026108354409703494)\n(SNP,-0.0412820266995392)\n(SNP,-0.04113112793333201)\n(SNP,-0.05449914781987414)\n(SNP,-0.07877995518017454)\n(SNP,-0.12402305883887964)\n(SNP,-0.1303251520532118)\n(SNP,-0.1028859369750627)\n(SNP,-0.1489256435625132)\n(SNP,-0.10624995898437081)\n(SNP,-0.06392075421235627)\n(SNP,-0.07506718096154516)\n(SNP,-0.07560315948508524)\n(SNP,-0.034482835671806496)\n(SNP,0.061870676258992736)\n(SNP,0.06811586296995498)\n(SNP,0.04755233699447092)\n(SNP,0.078978214914856)\n(SNP,-5.825175164635763E-4)\n(SNP,-0.02857139755102314)\n(SNP,0.01449295820208201)\n(SNP,0.023781899793283094)\n(SNP,-0.009999970571431004)\n(SNP,-0.15880783325617887)\n(SNP,-0.13025750099871117)\n(SNP,-0.10814401977890786)\n(SNP,-0.09523820926466438)\n(SNP,-0.0014581047012061706)\n(SNP,0.03088226107267531)\n(SNP,0.02714288338775286)\n(SNP,0.029744954136549036)\n(SNP,0.06089439412474529)\n(SNP,0.21005173454274934)\n(SNP,0.17191872512968412)\n(SNP,0.14011978202875547)\n(SNP,0.1386468821618434)\n(SNP,0.05985431880234233)\n(SNP,0.03281004185991314)\n(SNP,0.0556327615429472)\n(SNP,0.0508941939231308)\n(SNP,0.03101221858164015)\n(SNP,0.011448375627039977)\n(SNP,0.011448375627039977)\n(SNP,-0.014705959975895872)\n(SNP,-0.026413073089642268)\n(SNP,0.009641844933180968)\n(SNP,-0.01160190832081103)\n(SNP,-0.09090924422085657)\n(SNP,-0.11596885916637971)\n(SNP,-0.1094987483378631)\n(SNP,-0.1134510600973381)\n(SNP,-0.06554374490425136)\n(SNP,-0.02718566098081029)\n(SNP,0.0)\n(SNP,-0.007640054153339535)\n(SNP,0.020122691992991472)\n(SNP,0.06811586296995498)\n(SNP,0.09564724826424313)\n(SNP,0.09629629344307279)\n(SNP,0.11935877308298953)\n(SNP,0.06760589684590108)\n(SNP,0.02465762049166359)\n(SNP,0.017362722406723746)\n(SNP,0.005499176051555149)\n(SNP,-0.0013698084443521336)\n(SNP,-0.017639080691277162)\n(SNP,-0.004054270160695393)\n(SNP,0.019189053535430968)\n(SNP,0.031830345671892454)\n(SNP,0.04010551027910177)\n(SNP,0.07219241220794748)\n(SNP,0.050400142741359844)\n(SNP,0.06781506884919514)\n(SNP,0.0666666739826254)\n(SNP,0.08701670190930708)\n(SNP,0.02849419808573654)\n(SNP,0.033147762731133734)\n(SNP,0.012853263790236697)\n(SNP,-0.004312556749424884)\n(SNP,-0.019949953607223837)\n(SNP,-0.00990096521457036)\n(SNP,0.011523919234204311)\n(SNP,0.005658385355801063)\n(SNP,-0.011435680668539918)\n(SNP,0.007915592832127264)\n(SNP,-0.05415824199990978)\n(SNP,-0.07766478142954064)\n(SNP,-0.0802548748914714)\n(SNP,-0.08778641221374033)\n(SNP,-0.07948736101249657)\n(SNP,-0.10126606313087816)\n(SNP,-0.0843989387824459)\n(SNP,-0.06272516225769947)\n(SNP,-0.023560284874308213)\n(SNP,0.01492548451773115)\n(SNP,0.05118331993533391)\n(SNP,0.060941914733624154)\n(SNP,0.07670874366115657)\n(SNP,0.08635118915903951)\n(SNP,0.09436649216429481)\n(SNP,0.10167604488000509)\n(SNP,0.08475067220252408)\n(SNP,0.04825715558942874)\n(SNP,0.045454468886722194)\n(SNP,0.020942248567768648)\n(SNP,0.020887545146539305)\n(SNP,0.0012952849069799296)\n(SNP,-0.02820500072320514)\n(SNP,-0.02187914776330152)\n(SNP,-0.02611572140546268)\n(SNP,-0.03160561075052245)\n(SNP,-0.0038361386960827164)\n(SNP,0.004603530118188705)\n(SNP,0.04435900113741014)\n(SNP,0.02685450539966829)\n(SNP,0.031047968952134537)\n(SNP,0.05540878043179092)\n(SNP,0.039473815789473725)\n(SNP,0.02889883294436348)\n(SNP,0.048563941290758576)\n(SNP,0.030808831044702664)\n(SNP,0.03895133176198209)\n(SNP,0.01153945494721338)\n(SNP,0.046076955656667994)\n(SNP,0.05796729656539063)\n(SNP,0.027499877062490775)\n(SNP,0.06278467559687638)\n(SNP,0.06781384452499212)\n(SNP,0.04855585159362556)\n(SNP,0.03611439151751038)\n(SNP,-0.007596079392305936)\n(SNP,-0.03519436722357433)\n(SNP,-0.05357145875850694)\n(SNP,-0.04767542581415026)\n(SNP,-0.010948785586138344)\n(SNP,-0.06646036207717958)\n(SNP,-0.06232239188809491)\n(SNP,-0.0548565859755459)\n(SNP,-0.06610560413969242)\n(SNP,-0.055555574759943174)\n(SNP,-0.037987452274835624)\n(SNP,-0.03647781682684025)\n(SNP,-0.05728549722472014)\n(SNP,-0.05608863882572982)\n(SNP,0.005358536161041472)\n(SNP,0.00783416809038849)\n(SNP,0.0012565831671522767)\n(SNP,0.03217471915383266)\n(SNP,0.045751473535832164)\n(SNP,0.04759415097173267)\n(SNP,0.06266302708451625)\n(SNP,0.09326311086142375)\n(SNP,0.08079240252161621)\n(SNP,0.07233511070242525)\n(SNP,0.02332011383953565)\n(SNP,0.03889557953369349)\n(SNP,0.014962646003454502)\n(SNP,0.01250017593751311)\n(SNP,0.005991164302000778)\n(SNP,0.0027028258848680697)\n(SNP,0.0029000241662638223)\n(SNP,7.235351204985042E-4)\n(SNP,-0.0023667456741654717)\n(SNP,0.04165643224699824)\n(SNP,0.033816672384461385)\n(SNP,0.040540520950923975)\n(SNP,0.03876540357872565)\n(SNP,0.013647742274137557)\n(SNP,0.0046556236216613745)\n(SNP,-0.006747180235143652)\n(SNP,-0.03108438329510485)\n(SNP,-0.04507714981657299)\n(SNP,-0.06492601893498044)\n(SNP,-0.07359821914031164)\n(SNP,-0.04486428026412473)\n(SNP,-0.04373686400735459)\n(SNP,-0.026928002918384118)\n(SNP,-0.007317098274838898)\n(SNP,-0.018680327350840183)\n(SNP,0.004725018534568084)\n(SNP,0.012422161182058257)\n(SNP,0.030188784431011483)\n(SNP,0.032786860852127626)\n(SNP,0.012361090207384937)\n(SNP,0.02038282730996244)\n(SNP,0.037736005696000836)\n(SNP,0.0)\n(SNP,0.018541660032961094)\n(SNP,0.019802181158739735)\n(SNP,0.006135043998657852)\n(SNP,-0.04151394586148695)\n(SNP,-0.041269794445411276)\n(SNP,-0.044200270779011994)\n(SNP,-0.048721030263731535)\n(SNP,-0.05454547878787873)\n(SNP,-0.04398020196316978)\n(SNP,-0.0587379097700043)\n(SNP,-0.0582526428032697)\n(SNP,-0.053658614991084444)\n(SNP,-0.01910853405816395)\n(SNP,-0.0066225420275088)\n(SNP,-0.01890651652323835)\n(SNP,-0.029449221966629587)\n(SNP,-0.010256333596316222)\n(SNP,0.010023104342762571)\n(SNP,0.030943914388860166)\n(SNP,0.030927943724113553)\n(SNP,0.027835082341380907)\n(SNP,0.0350652540395333)\n(SNP,0.015384667061145215)\n(SNP,0.044531436930357944)\n(SNP,0.04749318759966347)\n(SNP,0.03523302926253728)\n(SNP,0.030279745547073942)\n(SNP,0.018258827131212185)\n(SNP,0.022250151668761365)\n(SNP,0.022567806805587672)\n(SNP,0.031869381995545135)\n(SNP,0.044191766560814)\n(SNP,0.03590121895528162)\n(SNP,0.051637184044048774)\n(SNP,0.05730733663468485)\n(SNP,0.030378122555414555)\n(SNP,0.024809903553655876)\n(SNP,0.03472709454191048)\n(SNP,0.031142595936370608)\n(SNP,0.022616586153127113)\n(SNP,0.05320443206825061)\n(SNP,0.1022863513288483)\n(SNP,0.04790448822121925)\n(SNP,0.013017870438715731)\n(SNP,0.042665312304380275)\n(SNP,0.038350811279883795)\n(SNP,0.028125908030145176)\n(SNP,0.042806356709738355)\n(SNP,0.042806356709738355)\n(SNP,-0.004592537524341664)\n(SNP,-0.05873356023435717)\n(SNP,-0.009143107735487276)\n(SNP,-0.02640191403724896)\n(SNP,-0.027586321204912095)\n(SNP,-0.005078393351800597)\n(SNP,-0.0011493792839222029)\n(SNP,-0.019384401368301038)\n(SNP,-0.04241740022805015)\n(SNP,-0.06574370150417327)\n(SNP,-0.062398535727277445)\n(SNP,-0.0675892150663092)\n(SNP,-0.021118454016835795)\n(SNP,-0.05200953210492035)\n(SNP,-0.07192590979805936)\n(SNP,-0.07042593299705885)\n(SNP,-0.038372075121684925)\n(SNP,-0.03548447502865993)\n(SNP,-0.001234864075568864)\n(SNP,-0.005442800459109261)\n(SNP,-0.006679762328556079)\n(SNP,-0.014464135139021107)\n(SNP,0.006982744361077626)\n(SNP,0.007500050562503772)\n(SNP,0.0027236447361866675)\n(SNP,-0.03458283368595328)\n(SNP,-0.017284245206494152)\n(SNP,-0.048207673316721614)\n(SNP,-0.035572136648845516)\n(SNP,-0.02615220097730991)\n(SNP,-0.03482611680402117)\n(SNP,-0.01807830564442034)\n(SNP,-0.012407121895958275)\n(SNP,-0.011111332235917665)\n(SNP,0.002254509300414577)\n(SNP,-0.0090450771949904)\n(SNP,0.012987197503833342)\n(SNP,0.007221897816205933)\n(SNP,0.011509183351792697)\n(SNP,0.0025775777846144842)\n(SNP,0.008827188116700819)\n(SNP,-5.023367843894689E-4)\n(SNP,-0.007490662608072778)\n(SNP,0.005998651087059469)\n(SNP,-0.0010142748993041475)\n(SNP,0.013589667015119525)\n(SNP,-0.0025606916835535613)\n(SNP,-0.026043082727452593)\n(SNP,-0.01979442006726826)\n(SNP,-0.04599985344998894)\n(SNP,-0.03846143887535033)\n(SNP,-0.02641502285509773)\n(SNP,-0.04695664479610808)\n(SNP,-0.017766448955132956)\n(SNP,-0.03996949556989582)\n(SNP,-0.046213272240994314)\n(SNP,-0.0342680953859837)\n(SNP,-0.024390453710988743)\n(SNP,-0.01729585817904678)\n(SNP,-0.07189562834805532)\n(SNP,-0.07700266746790713)\n(SNP,-0.06412941231797847)\n(SNP,-0.07260982475011567)\n(SNP,-0.04084329165516241)\n(SNP,0.001345841401751026)\n(SNP,0.0021506187420684882)\n(SNP,0.015322906521055122)\n(SNP,0.0018668003484692587)\n(SNP,0.039436935131962676)\n(SNP,0.04115350635277258)\n(SNP,0.04234020442121564)\n(SNP,0.05461117759357849)\n(SNP,0.03901107250030422)\n(SNP,0.013441051277645343)\n(SNP,-0.006169421428302227)\n(SNP,-0.008472569926124416)\n(SNP,-0.0018633218984998288)\n(SNP,0.02710021239562956)\n(SNP,0.057273330783006005)\n(SNP,0.042223243957343115)\n(SNP,0.030383282511658186)\n(SNP,0.03172903058016746)\n(SNP,0.03501313090220503)\n(SNP,0.0663967899162426)\n(SNP,0.06542075639796478)\n(SNP,0.046666915377824164)\n(SNP,0.035619996240633625)\n(SNP,-0.0015257378485733456)\n(SNP,0.0064103334977008465)\n(SNP,0.015384667061145215)\n(SNP,0.0046132759528359464)\n(SNP,-0.011532472301251411)\n(SNP,-0.026322399392558773)\n(SNP,-0.033584033404309176)\n(SNP,-0.014522215820524053)\n(SNP,0.006369502860152709)\n(SNP,0.038461538461538596)\n(SNP,0.06751586917116581)\n(SNP,0.0601009833307832)\n(SNP,0.08418361385881497)\n(SNP,0.10967089263709291)\n(SNP,0.13049131112600412)\n(SNP,0.13589219750757778)\n(SNP,0.14038250512118589)\n(SNP,0.11265796042304298)\n(SNP,0.06671579592837866)\n(SNP,0.04295923627684972)\n(SNP,0.062410552644116324)\n(SNP,0.053646915122497994)\n(SNP,0.07242971454931908)\n(SNP,0.07495970970615927)\n(SNP,0.07648390061717349)\n(SNP,0.08818866270259217)\n(SNP,0.07736082791363229)\n(SNP,0.07449971893540679)\n(SNP,0.04096131184646436)\n(SNP,-0.001345179523002204)\n(SNP,0.025011145601710194)\n(SNP,-0.011982354246443687)\n(SNP,-0.03208568915324727)\n(SNP,-0.05090125456423676)\n(SNP,-0.06458347513019944)\n(SNP,-0.0749736172139208)\n(SNP,-0.05307083698444992)\n(SNP,-0.023961243702764413)\n(SNP,0.0103275931746745)\n(SNP,-0.013071940421779924)\n(SNP,-0.0011028003194266988)\n(SNP,-0.00220985659777415)\n(SNP,0.013407865022936501)\n(SNP,0.002227060332032097)\n(SNP,0.022831026354747715)\n(SNP,0.018983233354416516)\n(SNP,-0.0022524772745517)\n(SNP,-0.03666662955554821)\n(SNP,-0.0474611773118817)\n(SNP,-0.041942346437007186)\n(SNP,-0.03654480701095926)\n(SNP,-0.031973712020539)\n(SNP,-0.025555360666627686)\n(SNP,-0.032366249277539165)\n(SNP,-0.05500130361487665)\n(SNP,-0.03363415805428774)\n(SNP,-0.01199531912265814)\n(SNP,-4.636152739922841E-4)\n(SNP,0.03732709247383728)\n(SNP,0.05747135500065861)\n(SNP,0.04373572052863693)\n(SNP,0.04675017103762818)\n(SNP,0.03529430789066108)\n(SNP,0.006805985309315307)\n(SNP,0.004671922338894533)\n(SNP,0.028484919774449603)\n(SNP,0.020867100918184542)\n(SNP,-0.033762771351337886)\n(SNP,-0.060652341233441175)\n(SNP,-0.0659099155292357)\n(SNP,-0.0413943835941593)\n(SNP,-0.021613323939097012)\n(SNP,-0.015151515857879496)\n(SNP,-0.02348316342945869)\n(SNP,-0.05561876780717731)\n(SNP,-0.06291161286754635)\n(SNP,-0.04298850475888489)\n(SNP,-0.05369114003872764)\n(SNP,-0.04322441285810181)\n(SNP,-0.0999998340908828)\n(SNP,-0.0899566943699265)\n(SNP,-0.031952593228525)\n(SNP,0.005714429251717793)\n(SNP,0.037500025841347394)\n(SNP,0.05598635889382161)\n(SNP,0.05092488467631785)\n(SNP,0.0687206846133027)\n(SNP,0.08913302022627691)\n(SNP,0.1285351482693145)\n(SNP,0.09484502714051744)\n(SNP,0.08361865321225771)\n(SNP,0.059422394426553164)\n(SNP,0.047265941780953336)\n(SNP,0.05944462604240887)\n(SNP,0.05142858958367192)\n(SNP,0.05377600526791847)\n(SNP,0.03452928638220695)\n(SNP,0.03893491323661651)\n(SNP,0.061256908685082725)\n(SNP,0.04467479289938695)\n(SNP,0.026145182604792275)\n(SNP,-0.002212278907894614)\n(SNP,-0.030545778210206084)\n(SNP,-0.013043520321356562)\n(SNP,-0.0034746143230434895)\n(SNP,-0.0052016903944150554)\n(SNP,-0.008184170775469063)\n(SNP,0.04135275141323522)\n(SNP,0.036717328951532645)\n(SNP,0.054006946864111484)\n(SNP,0.08093117157733151)\n(SNP,0.08826810581442868)\n(SNP,0.06299561257738252)\n(SNP,0.054696059361259056)\n(SNP,0.04357294592297897)\n(SNP,0.07383263362653858)\n(SNP,0.023784735313971597)\n(SNP,0.026041706705726708)\n(SNP,0.017975227644116316)\n(SNP,0.0215384008836268)\n(SNP,0.02258714532675271)\n(SNP,0.03191029573888971)\n(SNP,0.030991860144459902)\n(SNP,0.04801666672477374)\n(SNP,0.010111365833073144)\n(SNP,0.009091092011041484)\n(SNP,0.009136933082544797)\n(SNP,0.028008930383600476)\n(SNP,0.04176703230592686)\n(SNP,0.04417677150369182)\n(SNP,0.05662651170948913)\n(SNP,0.05310616702343009)\n(SNP,0.04980090534279183)\n(SNP,0.0720720277033817)\n(SNP,0.08728710186463853)\n(SNP,0.09275644049811761)\n(SNP,0.05429403751233965)\n(SNP,0.040863594565249926)\n(SNP,0.07730779143491515)\n(SNP,0.1164957541330058)\n(SNP,0.09019967134921011)\n(SNP,0.09487683832082262)\n(SNP,0.07040152996449053)\n(SNP,0.06334023899910574)\n(SNP,0.10661030454173855)\n(SNP,0.144194869089215)\n(SNP,0.14351856618656036)\n(SNP,0.13941436240194416)\n(SNP,0.0468083906926232)\n(SNP,0.022691570793616344)\n(SNP,0.04852668556961132)\n(SNP,0.06420095616533729)\n(SNP,0.030302942673491134)\n(SNP,-0.02579039976356733)\n(SNP,-0.03027831523005935)\n(SNP,-0.03935217941221634)\n(SNP,-0.06000301175014963)\n(SNP,-0.004065089827488431)\n(SNP,0.028332413608630383)\n(SNP,0.006281025312481507)\n(SNP,-0.001967295017465721)\n(SNP,0.03865543052044191)\n(SNP,0.059436349064823195)\n(SNP,0.03459932898219909)\n(SNP,0.02073486141714669)\n(SNP,0.018833265411115734)\n(SNP,-0.022857064583078943)\n(SNP,-0.0066389386408549494)\n(SNP,-0.025952793657332218)\n(SNP,-0.011990802167746558)\n(SNP,-0.018770292780768034)\n(SNP,-0.05658554472857119)\n(SNP,-0.0986950196397217)\n(SNP,-0.0761353514937648)\n(SNP,-0.09373481105840017)\n(SNP,-0.0543024263527102)\n(SNP,-0.04344194108216807)\n(SNP,-0.011804352550407652)\n(SNP,-0.03823772426788317)\n(SNP,-0.03726911832820029)\n(SNP,0.01674648183912122)\n(SNP,0.08325788536680127)\n(SNP,0.0720415292113525)\n(SNP,0.11462108360270308)\n(SNP,0.08745576589793409)\n(SNP,0.05729261535668921)\n(SNP,0.0)\n(SNP,-0.0024199827975792923)\n(SNP,0.0071943654942604)\n(SNP,-0.028571379591834322)\n(SNP,-0.0033415373996014495)\n(SNP,0.006669934856262457)\n(SNP,-0.021052632260813955)\n(SNP,0.003249488643312818)\n(SNP,0.015199058820388599)\n(SNP,0.04692846976961245)\n(SNP,0.06394033741326154)\n(SNP,0.030612109364151572)\n(SNP,0.041868494809688656)\n(SNP,0.009555640439594284)\n(SNP,0.0021533544220649955)\n(SNP,0.039205973174722054)\n(SNP,0.055060617167955246)\n(SNP,0.11309998924816866)\n(SNP,0.14343926416561928)\n(SNP,0.13843643547942078)\n(SNP,0.0891090066333507)\n(SNP,0.0868481083833959)\n(SNP,0.05994681268593179)\n(SNP,0.05123978935866036)\n(SNP,0.02674294853140624)\n(SNP,0.003837345119510556)\n(SNP,-0.02046778047090681)\n(SNP,-0.054882423378474744)\n(SNP,-0.03447791327484476)\n(SNP,0.060454518815425386)\n(SNP,0.041253022613050985)\n(SNP,0.06219657290907558)\n(SNP,0.059748268561375106)\n(SNP,0.0544186277483357)\n(SNP,-0.01070333431529073)\n(SNP,-0.05447755630429527)\n(SNP,-0.03469078536020468)\n(SNP,-0.0798635916229948)\n(SNP,-0.12158873738437521)\n(SNP,-0.14365370084655316)\n(SNP,-0.09660784233298636)\n(SNP,-0.1023738548811697)\n(SNP,-0.1339508759242318)\n(SNP,-0.08500773323077176)\n(SNP,-0.06550912494884173)\n(SNP,-0.06328137598877158)\n(SNP,-0.049919358289179955)\n(SNP,-0.0728693408078943)\n(SNP,-0.03444156838788321)\n(SNP,-0.05795896361846003)\n(SNP,-0.07322304737380558)\n(SNP,-0.06621391166864976)\n(SNP,-0.12162159605551326)\n(SNP,-0.13851347219685617)\n(SNP,-0.16597151782725034)\n(SNP,-0.18644069606434782)\n(SNP,-0.15263138984300204)\n(SNP,-0.09671674842473797)\n(SNP,-0.06949753297248414)\n(SNP,-0.05742816020281504)\n(SNP,-0.06763636978512451)\n(SNP,0.01000003884615544)\n(SNP,0.04764700093425492)\n(SNP,0.06679996000000003)\n(SNP,0.11979143001303562)\n(SNP,0.1173910668827274)\n(SNP,0.06836920877255727)\n(SNP,0.03278091075326381)\n(SNP,0.08666020157727905)\n(SNP,0.10920451532805332)\n(SNP,0.08301603198781406)\n(SNP,0.05839420238773739)\n(SNP,0.06486695031372143)\n(SNP,0.0656745400073734)\n(SNP,0.043357407884043984)\n(SNP,0.04468558540008736)\n(SNP,0.02344454294358567)\n(SNP,-0.028382258637106746)\n(SNP,-0.015471325053750774)\n(SNP,-0.046237744506408336)\n(SNP,-0.050221151201455434)\n(SNP,-0.05809853770953287)\n(SNP,-0.0450419883045387)\n(SNP,-0.022376135304725278)\n(SNP,-0.03186065889562856)\n(SNP,-0.017797567027484196)\n(SNP,-0.0012546235884609953)\n(SNP,0.006249982924104952)\n(SNP,0.035023078986600543)\n(SNP,0.09104453041065427)\n(SNP,0.046728762861401034)\n(SNP,0.024863092761273298)\n(SNP,0.015440619864213483)\n(SNP,0.03272738479339868)\n(SNP,0.00825272813099789)\n(SNP,0.012919577688819099)\n(SNP,0.009760516026337656)\n(SNP,0.026713997743294682)\n(SNP,1.70870327578379E-4)\n(SNP,0.05339284595981998)\n(SNP,0.06582225716573264)\n(SNP,0.07656531579840138)\n(SNP,0.04313366121243557)\n(SNP,0.04946612187662146)\n(SNP,0.04605843865057008)\n(SNP,0.04217915863861996)\n(SNP,0.02688645646299485)\n(SNP,6.822213940739316E-4)\n(SNP,-0.013392017412038259)\n(SNP,-0.02761504602510462)\n(SNP,-0.020272416421941112)\n(SNP,-5.061941526305331E-4)\n(SNP,3.392675770826904E-4)\n(SNP,0.01828958447791413)\n(SNP,0.013996814940494661)\n(SNP,0.053209530622265626)\n(SNP,0.057118678841740954)\n(SNP,0.05154632568108201)\n(SNP,0.05851967197040155)\n(SNP,0.01848704049465395)\n(SNP,0.03174598055140181)\n(SNP,0.04830487726229847)\n(SNP,0.02777304081912396)\n(SNP,0.017794627713466595)\n(SNP,-0.005613456295108323)\n(SNP,0.016129015868886883)\n(SNP,0.021732077649093812)\n(SNP,0.026829254650008603)\n(SNP,0.05328895831325628)\n(SNP,0.015548298381286367)\n(SNP,-0.009054196659326982)\n(SNP,0.0029126377761033344)\n(SNP,0.010620916247490397)\n(SNP,-0.0016130644901118226)\n(SNP,-0.021428539682539674)\n(SNP,-0.01599230871532433)\n(SNP,-0.045922427893222456)\n(SNP,-0.03399217230076653)\n(SNP,-0.01692178915264765)\n(SNP,1.633545679586759E-4)\n(SNP,-0.02161995944627034)\n(SNP,-0.006143751705840886)\n(SNP,0.01373192445213765)\n(SNP,0.031630169290181094)\n(SNP,0.04176819641320629)\n(SNP,0.07302917152254551)\n(SNP,0.05597386435266322)\n(SNP,0.06803260432679982)\n(SNP,0.0815659829576192)\n(SNP,0.08179435580720967)\n(SNP,0.10053673009478677)\n(SNP,0.08972110389104887)\n(SNP,0.07389925868241312)\n(SNP,0.029641219623203097)\n(SNP,0.027996968723851125)\n(SNP,0.07253561573875382)\n(SNP,0.06369921064148724)\n(SNP,0.037104133849295104)\n(SNP,0.06326224085365872)\n(SNP,0.06430168989665114)\n(SNP,0.05703420924446959)\n(SNP,0.05549058971380603)\n(SNP,0.12121221946740723)\n(SNP,0.10592825281696117)\n(SNP,0.0578033967890664)\n(SNP,0.06060608028335472)\n(SNP,0.06893532376569736)\n(SNP,0.049462234431731804)\n(SNP,0.02791659567130009)\n(SNP,0.04745436133469578)\n(SNP,0.06880280014418635)\n(SNP,0.09189190292184059)\n(SNP,0.09931984349114589)\n(SNP,0.09221316329616082)\n(SNP,0.0692518006293742)\n(SNP,0.020408246286275245)\n(SNP,0.04234982587566866)\n(SNP,0.07350345998518398)\n(SNP,0.06194683988624165)\n(SNP,0.044127296255797525)\n(SNP,0.034034627449209265)\n(SNP,0.03700493674486618)\n(SNP,0.036772997002113825)\n(SNP,0.035755031536963244)\n(SNP,0.08639991884800115)\n(SNP,0.07483622444513484)\n(SNP,0.04657028905856369)\n(SNP,0.041044942405528466)\n(SNP,0.059042768972391774)\n(SNP,0.0332734286861349)\n(SNP,0.022675640943414673)\n(SNP,0.06164793248034573)\n(SNP,0.07592149581345155)\n(SNP,0.06038296885020662)\n(SNP,0.05352998088464922)\n(SNP,0.05051107697547914)\n(SNP,0.08315395062585643)\n(SNP,0.07687790357264698)\n(SNP,0.06915326394779413)\n(SNP,0.07713856299254737)\n(SNP,0.04886366186725359)\n(SNP,0.09043160642191833)\n(SNP,0.06192121599445866)\n(SNP,0.07627312588279091)\n(SNP,0.04785347726694191)\n(SNP,9.92808404236661E-4)\n(SNP,-0.05209802089138062)\n(SNP,-0.08569884352217262)\n(SNP,-0.09859155250026723)\n(SNP,-0.09859155250026723)\n(SNP,-0.12335078663194542)\n(SNP,-0.11716620095182138)\n(SNP,-0.1114098326081245)\n(SNP,-0.09559708710136945)\n(SNP,-0.04165288246066962)\n(SNP,-0.008853639287727342)\n(SNP,0.030572404117009414)\n(SNP,0.030048126083466135)\n(SNP,0.01201927927954137)\n(SNP,0.0031055423208975553)\n(SNP,0.0432099167809814)\n(SNP,0.009923732660912456)\n(SNP,0.0020536241878246577)\n(SNP,-0.05024725825281422)\n(SNP,-0.038399072816683685)\n(SNP,-0.05427162302255523)\n(SNP,-0.03208876275275652)\n(SNP,-0.0029692279932396403)\n(SNP,0.0011907002375981651)\n(SNP,-0.022485231567522856)\n(SNP,-0.018573973551466387)\n(SNP,-0.013984389197183042)\n(SNP,0.0)\n(SNP,-0.001809723773910571)\n(SNP,0.005957374149902816)\n(SNP,0.0)\n(SNP,0.0017868137497858527)\n(SNP,0.029733650063469345)\n(SNP,0.0472154992261197)\n(SNP,0.056776497806220974)\n(SNP,-0.00965882267082839)\n(SNP,-0.03147699948407997)\n(SNP,-0.06333092377700322)\n(SNP,-0.07009895698561242)\n(SNP,-0.11633502951187678)\n(SNP,-0.10820445351988438)\n(SNP,-0.13374907217308107)\n(SNP,-0.1063583414079966)\n(SNP,-0.09069899163017833)\n(SNP,-0.03148152085048307)\n(SNP,-0.03125006445312905)\n(SNP,-0.017548324844945114)\n(SNP,-0.011567532691674052)\n(SNP,0.03274207188310648)\n(SNP,0.00413330661155601)\n(SNP,0.01599985312000199)\n(SNP,0.003881009105834611)\n(SNP,0.023507040883547686)\n(SNP,0.04537940609833862)\n(SNP,0.08800015329034247)\n(SNP,0.12424483348074826)\n(SNP,0.10979624364745205)\n(SNP,0.14240424418505288)\n(SNP,0.12601240374468728)\n(SNP,0.11876644603234209)\n(SNP,0.10657215068850319)\n(SNP,0.09062685401150658)\n(SNP,0.07182032241066191)\n(SNP,0.042457174543913935)\n(SNP,0.031191625289328215)\n(SNP,0.0877961600972018)\n(SNP,0.08926919622189171)\n(SNP,0.10200484332587144)\n(SNP,0.0742522298418514)\n(SNP,0.07720970071037601)\n(SNP,0.029026775551670013)\n(SNP,0.022980696584834683)\n(SNP,-0.014903278145993046)\n(SNP,0.010535754056143142)\n(SNP,-0.026141042135095563)\n(SNP,-0.05605095600903351)\n(SNP,-0.05275554672801874)\n(SNP,-0.020419306863025177)\n(SNP,-0.03394602272257368)\n(SNP,-0.023340709513764053)\n(SNP,-0.029581808352676434)\n(SNP,0.009931967657417096)\n(SNP,0.0022422760361296397)\n(SNP,0.013868752560396233)\n(SNP,0.02170495975826534)\n(SNP,0.03886119652715308)\n(SNP,0.03667372890471943)\n(SNP,0.05192489390386021)\n(SNP,0.07622611232706632)\n(SNP,0.1757965222024934)\n(SNP,0.17106903177736954)\n(SNP,0.16319908094855606)\n(SNP,0.1629344196419298)\n(SNP,0.14408361501007746)\n(SNP,0.12766432445240586)\n(SNP,0.1183871044120713)\n(SNP,0.10148926811679294)\n(SNP,0.08071987204966967)\n(SNP,-0.008479493094741787)\n(SNP,-0.0066398113434013185)\n(SNP,-0.012405067914271244)\n(SNP,-0.041927548148194285)\n(SNP,0.06648065165979745)\n(SNP,0.06316294117647049)\n(SNP,0.05278337002884549)\n(SNP,0.0768786154690435)\n(SNP,0.0873502881229943)\n(SNP,0.07981903667457795)\n(SNP,0.059471057727756835)\n(SNP,0.05550153088613557)\n(SNP,0.07306934025095746)\n(SNP,-0.02977003157419929)\n(SNP,-0.007981886838509283)\n(SNP,0.016803626798438456)\n(SNP,0.022421470852017945)\n(SNP,0.012000716460684251)\n(SNP,0.042330406639250036)\n(SNP,0.09027652960759071)\n(SNP,0.07269363267453052)\n(SNP,0.03026390533795725)\n(SNP,0.05708981363754999)\n(SNP,0.021852447024912475)\n(SNP,0.007454787875001501)\n(SNP,-0.018771957128348685)\n(SNP,0.0029202566371681208)\n(SNP,0.0)\n(SNP,-0.02561491787932951)\n(SNP,-0.008857895270083231)\n(SNP,0.028121054988357586)\n(SNP,0.01486500998447528)\n(SNP,0.03212237051261168)\n(SNP,0.01524461909402601)\n(SNP,0.026461748955442066)\n(SNP,0.0190594565397867)\n(SNP,-0.01310035910832512)\n(SNP,-0.019737931682457462)\n(SNP,-0.07158350728633849)\n(SNP,-0.07665508040039412)\n(SNP,-0.08008333055700015)\n(SNP,-0.07802336041774499)\n(SNP,-0.07244458583304807)\n(SNP,-0.07028403465800326)\n(SNP,-0.07792886166582898)\n(SNP,-0.07123900884955757)\n(SNP,-0.06717751367030492)\n(SNP,-0.010280374023932304)\n(SNP,-0.021226378559983654)\n(SNP,-0.030996799896031706)\n(SNP,-0.0370475794461228)\n(SNP,-0.05595015355722081)\n(SNP,-0.07644020459805392)\n(SNP,-0.04948814298447744)\n(SNP,-0.06155302041376043)\n(SNP,-0.08615090274026184)\n(SNP,-0.08215295717002746)\n(SNP,-0.06602413621251345)\n(SNP,-0.0918813224180315)\n(SNP,-0.12117953768337514)\n(SNP,-0.09747290387814914)\n(SNP,-0.040369308050903836)\n(SNP,-0.05601664635431098)\n(SNP,0.006701157273799699)\n(SNP,0.0754598910670929)\n(SNP,0.06995880658436207)\n(SNP,0.1093911419643637)\n(SNP,0.15631686964954467)\n(SNP,0.18699998121110956)\n(SNP,0.19500000405555587)\n(SNP,0.1650989956789763)\n(SNP,0.15363690857716003)\n(SNP,0.09934437720625307)\n(SNP,0.04713319865305737)\n(SNP,0.0471154248890549)\n(SNP,0.005488316534340345)\n(SNP,-0.01379623263116752)\n(SNP,-0.005429168344956216)\n(SNP,-0.019060856833908547)\n(SNP,-0.031116800669204327)\n(SNP,-0.03556213307516764)\n(SNP,-0.02651374433549278)\n(SNP,-0.014849243206053624)\n(SNP,0.014692341597796053)\n(SNP,0.05005096262892571)\n(SNP,0.0731386925760716)\n(SNP,0.14352947904221958)\n(SNP,0.13251183315199536)\n(SNP,0.12340828998337887)\n(SNP,0.13818083584018456)\n(SNP,0.1780228021305098)\n(SNP,0.1597738622639811)\n(SNP,0.15846153514792896)\n(SNP,0.07039650406334373)\n(SNP,0.03237094488188981)\n(SNP,0.02345677404867117)\n(SNP,0.026113174845713707)\n(SNP,0.06434397292308759)\n(SNP,0.07446283198483887)\n(SNP,0.1599999731199991)\n(SNP,0.1869060717671073)\n(SNP,0.29653930538783313)\n(SNP,0.2988723434027493)\n(SNP,0.3877965710830218)\n(SNP,0.28250899179763533)\n(SNP,0.3279770961168947)\n(SNP,0.1667971600186162)\n(SNP,0.18490887081272275)\n(SNP,0.053241382247800395)\n(SNP,0.028606563686146263)\n(SNP,-0.09471591822111937)\n(SNP,-0.044993675253525614)\n(SNP,-0.07315578553330926)\n(SNP,-0.052106757118642266)\n(SNP,-0.006817683691494517)\n(SNP,0.09382556460340116)\n(SNP,-0.06536833101077555)\n(SNP,-0.07661079500318459)\n(SNP,-0.06187619256496551)\n(SNP,-0.09484194973989679)\n(SNP,-0.09422696811033143)\n(SNP,-0.14349721682374708)\n(SNP,-0.11027323985698406)\n(SNP,-0.06561532426954031)\n(SNP,-0.11756045815585853)\n(SNP,-0.03688020481566458)\n(SNP,-0.05538219715684007)\n(SNP,-0.04588650452240794)\n(SNP,-0.029411730536329256)\n(SNP,-0.03296704882663199)\n(SNP,0.02469230864201171)\n(SNP,0.054275042102789044)\n(SNP,-0.07333385253821183)\n(SNP,-0.009247692008996307)\n(SNP,0.0814884887387062)\n(SNP,0.14338261929970045)\n(SNP,0.10889766594811565)\n(SNP,0.1228787716678137)\n(SNP,0.17507569110249888)\n(SNP,0.2089933717060797)\n(SNP,0.1472496577750111)\n(SNP,0.13491893589222492)\n(SNP,0.12042955438483771)\n(SNP,0.05361065582190201)\n(SNP,-0.016479562178169007)\n(SNP,-0.0429012191399406)\n(SNP,-0.0756982104775476)\n(SNP,-0.08903353435349161)\n(SNP,-0.109407028193685)\n(SNP,-0.10068846205363056)\n(SNP,-0.05884203013480365)\n(SNP,-0.03839649955268394)\n(SNP,-0.028415887048761176)\n(SNP,0.031308446473805096)\n(SNP,0.09258996422881319)\n(SNP,0.10576637071873911)\n(SNP,0.05506012303907181)\n(SNP,0.039391961510088114)\n(SNP,0.013123705433968803)\n(SNP,-0.04513539525966678)\n(SNP,-0.04253519549684713)\n(SNP,-0.06272791371573452)\n(SNP,-0.06576476964890335)\n(SNP,-0.06916668855769306)\n(SNP,-0.09399964004223511)\n(SNP,-0.09444590242387195)\n(SNP,-0.12570424274517641)\n(SNP,-0.16354064657540457)\n(SNP,-0.19957979830167222)\n(SNP,-0.1951153177829957)\n(SNP,-0.17388289635626256)\n(SNP,-0.17640132009425588)\n(SNP,-0.3043179101911796)\n(SNP,-0.20451723894478968)\n(SNP,-0.1851110971160487)\n(SNP,-0.0791775273962135)\n(SNP,-0.08372313478923536)\n(SNP,-0.010498722659667479)\n(SNP,-0.08731297110295666)\n(SNP,-0.1250105293602477)\n(SNP,-0.06410367898139482)\n(SNP,0.18491390664362556)\n(SNP,0.10871943479831982)\n(SNP,0.03790567324531432)\n(SNP,-0.10923189286399121)\n(SNP,-0.013204321834392916)\n(SNP,-0.018744456896355767)\n(SNP,0.02982031968217524)\n(SNP,0.08595336521219286)\n(SNP,0.042696641656357635)\n(SNP,-0.017627327975321183)\n(SNP,-0.028583141796072308)\n(SNP,0.04414073392888414)\n(SNP,0.02852875582534432)\n(SNP,-0.002230133968252246)\n(SNP,-0.02216620151678139)\n(SNP,-0.03767993908344998)\n(SNP,-0.06038079520900937)\n(SNP,-0.04232751153982842)\n(SNP,-0.01921943192448338)\n(SNP,-0.042010400544264005)\n(SNP,-0.08354302062550936)\n(SNP,-0.051746171805621695)\n(SNP,-0.07483236878850427)\n(SNP,-0.044415714254607414)\n(SNP,-0.09008492992499723)\n(SNP,-0.09987743144275374)\n(SNP,-0.12962467252115703)\n(SNP,-0.1492239221357061)\n(SNP,-0.20168670754602858)\n(SNP,-0.19513090569447333)\n(SNP,-0.24225566723464728)\n(SNP,-0.20313100327392758)\n(SNP,-0.18823523625843777)\n(SNP,-0.17839173623070217)\n(SNP,-0.1625667940692265)\n(SNP,-0.16227120332076542)\n(SNP,-0.12688540319315553)\n(SNP,-0.03814072480159294)\n(SNP,-0.04480328005495564)\n(SNP,0.10998614934713194)\n(SNP,0.05445070403166038)\n(SNP,0.04929897486583682)\n(SNP,0.15812507238281712)\n(SNP,0.18737499921093742)\n(SNP,0.20333334839506284)\n(SNP,0.15781488453151485)\n(SNP,0.08589607432925281)\n(SNP,0.07392871118198953)\n(SNP,0.004561026277776817)\n(SNP,0.04243819241227401)\n(SNP,-0.004754862770623477)\n(SNP,-0.04587159201295204)\n(SNP,-0.06600701543364658)\n(SNP,-0.03980707129211472)\n(SNP,-0.04214135497529997)\n(SNP,0.006281113260879875)\n(SNP,0.127812901808969)\n(SNP,0.19182745525735004)\n(SNP,0.18667237496290956)\n(SNP,0.22295524592043828)\n(SNP,0.16515832008455844)\n(SNP,0.17617238631727491)\n(SNP,0.14584891704080466)\n(SNP,0.13714338635031462)\n(SNP,0.19096495884098164)\n(SNP,0.09838799591936323)\n(SNP,0.03790476190476194)\n(SNP,-0.02129040733454886)\n(SNP,-0.03655476041705967)\n(SNP,-0.05058240198698279)\n(SNP,-0.06324873023478673)\n(SNP,-0.07693033454802617)\n(SNP,-0.10764529675270619)\n(SNP,-0.14941813625008932)\n(SNP,-0.12322147871537331)\n(SNP,-0.10093596990273453)\n(SNP,-0.11152275737756759)\n(SNP,-0.06362230774496111)\n(SNP,-0.039370097179154344)\n(SNP,-0.053503869744443426)\n(SNP,-0.06536012378625357)\n(SNP,-0.05103204289140343)\n(SNP,-0.031331604114828306)\n(SNP,-0.02969996998775188)\n(SNP,0.03133286448934208)\n(SNP,0.10574153356622691)\n(SNP,0.041344502843138675)\n(SNP,0.0452415782869413)\n(SNP,0.1036532731217703)\n(SNP,0.10495029009513958)\n(SNP,0.0984807344400802)\n(SNP,0.06274940432342449)\n(SNP,0.025139382830513434)\n(SNP,-0.06086091525865736)\n(SNP,-0.09920715624837716)\n(SNP,-0.04950494304479919)\n(SNP,0.012323067898657626)\n(SNP,0.034276743455233946)\n(SNP,0.022204941579179727)\n(SNP,0.033134329017598566)\n(SNP,0.026275559715667314)\n(SNP,0.0054381286861534565)\n(SNP,0.04225502767929487)\n(SNP,0.04014597682191816)\n(SNP,-0.020833313368054628)\n(SNP,-0.06861178137436394)\n(SNP,-0.12470409286091205)\n(SNP,-0.1310047809280925)\n(SNP,-0.15246078498431642)\n(SNP,-0.13009086547412999)\n(SNP,-0.04378002015634341)\n(SNP,-0.06601963467818857)\n(SNP,-0.01413821552971415)\n(SNP,0.005425478838839861)\n(SNP,0.018470611596968445)\n(SNP,0.005300833431487105)\n(SNP,-0.00914012743728231)\n(SNP,0.029204524386620682)\n(SNP,0.08068184549328672)\n(SNP,0.014514462285119524)\n(SNP,0.07036155240403395)\n(SNP,0.0151784045307401)\n(SNP,0.11152265136661271)\n(SNP,0.10085903385912713)\n(SNP,0.10029049714526517)\n(SNP,0.1335853812294351)\n(SNP,0.11504929673561981)\n(SNP,0.10241842594379894)\n(SNP,0.08363131970222981)\n(SNP,0.07352346501385913)\n(SNP,0.07774803533190562)\n(SNP,-0.0052355545975355045)\n(SNP,0.02090555013995904)\n(SNP,0.04058677869692271)\n(SNP,0.03990194156766608)\n(SNP,0.07446270401783411)\n(SNP,-0.013353635510205977)\n(SNP,-0.015047064852641984)\n(SNP,-0.05850213071602824)\n(SNP,-0.0383659881049749)\n(SNP,-0.051579070289596164)\n(SNP,-0.09351694669861767)\n(SNP,-0.058270707625503265)\n(SNP,-0.08343539408226815)\n(SNP,-0.08542989901133165)\n(SNP,-0.03615621826118819)\n(SNP,-0.014389819782363105)\n(SNP,0.009605693800508172)\n(SNP,-0.020893376911756557)\n(SNP,-0.02149123413290619)\n(SNP,0.009577274520328239)\n(SNP,-0.024351299349405116)\n(SNP,-0.022834940195693206)\n(SNP,-0.06287791339939365)\n(SNP,-0.09398188034011444)\n(SNP,-0.060000029399999634)\n(SNP,-0.08572835424194152)\n(SNP,-0.09755113078354896)\n(SNP,-0.11837485780830227)\n(SNP,-0.12239634702390266)\n(SNP,-0.14822006122913758)\n(SNP,-0.158421013340717)\n(SNP,-0.15870959088448972)\n(SNP,-0.13162855902516193)\n(SNP,-0.043191383897689006)\n(SNP,-0.03468836893971129)\n(SNP,-0.04335077814334975)\n(SNP,0.0011695321500640326)\n(SNP,0.01374693973964065)\n(SNP,-0.009247039750210082)\n(SNP,-0.04077544868450712)\n(SNP,-0.028246432966011075)\n(SNP,-0.005736792891646623)\n(SNP,-0.12297099195276923)\n(SNP,-0.1200449563181906)\n(SNP,-0.14912912433478703)\n(SNP,-0.14672889704340647)\n(SNP,-0.2748029470885831)\n(SNP,-0.17721218396620836)\n(SNP,-0.24944589907419473)\n(SNP,-0.05629358000016887)\n(SNP,-0.015130080779587012)\n(SNP,-0.11067439709302215)\n(SNP,-0.1407605391087702)\n(SNP,-0.06224930745255426)\n(SNP,0.005613280163748043)\n(SNP,0.15870217102921252)\n(SNP,0.008986580051848637)\n(SNP,0.11622669731341513)\n(SNP,-0.23331022671344634)\n(SNP,-0.3360240114552785)\n(SNP,-0.22993583749109056)\n(SNP,-0.14183876640188278)\n(SNP,-0.04115641496397301)\n(SNP,-0.11885630165512467)\n(SNP,-0.15158627043234596)\n(SNP,-0.08074175438421284)\n(SNP,-0.010894894602493495)\n(SNP,0.054353743588982976)\n(SNP,0.14196074788158328)\n(SNP,0.16790071884671015)\n(SNP,0.04984434491557158)\n(SNP,-0.08446160259881863)\n(SNP,-0.10939441874553706)\n(SNP,-0.043082398710115204)\n(SNP,-0.08243332274459975)\n(SNP,-0.13674280592110097)\n(SNP,-0.025344624622441764)\n(SNP,-0.09203298894400705)\n(SNP,-0.11618317058751533)\n(SNP,-0.05670965946736464)\n(SNP,6.72156007947155E-4)\n(SNP,0.0806730639029376)\n(SNP,0.05827380818285511)\n(SNP,0.14246145551190767)\n(SNP,0.16970476065812531)\n(SNP,0.07164324756890603)\n(SNP,0.15960672538628795)\n(SNP,0.09110464163900131)\n(SNP,0.04159383591675724)\n(SNP,0.10092370454311052)\n(SNP,0.0648580935716958)\n(SNP,0.10772201119313071)\n(SNP,0.07303029230486635)\n(SNP,0.006389184778270656)\n(SNP,0.0952459455428159)\n(SNP,0.06637309305892179)\n(SNP,0.09155174678920516)\n(SNP,0.11459739793253668)\n(SNP,0.037217724222086614)\n(SNP,0.009497889341173045)\n(SNP,-0.09956514053559404)\n(SNP,-0.15264042308955264)\n(SNP,-0.07076486966645201)\n(SNP,-0.08816880845281161)\n(SNP,-0.06407714011670615)\n(SNP,-0.08658339959468453)\n(SNP,-0.08685827709518455)\n(SNP,-0.10794108305362497)\n(SNP,-0.048088369779597594)\n(SNP,0.09238688383046655)\n(SNP,0.1339775181806779)\n(SNP,0.07482069530377097)\n(SNP,0.014710844190978853)\n(SNP,0.008823644800090137)\n(SNP,-0.04088359642460275)\n(SNP,-0.06758994283564222)\n(SNP,-0.09330705418221148)\n(SNP,-0.15892691116808633)\n(SNP,-0.18550163167830452)\n(SNP,-0.1876560249999736)\n(SNP,-0.1389145775229642)\n(SNP,-0.1097899477147752)\n(SNP,-0.12811802721088436)\n(SNP,-0.09281550041885533)\n(SNP,-0.032531686044173135)\n(SNP,0.012545455685950606)\n(SNP,0.07256113071597453)\n(SNP,0.007235817524677715)\n(SNP,-0.004522503536134107)\n(SNP,-0.04447248669526517)\n(SNP,-0.017383368152488067)\n(SNP,0.03083803113256948)\n(SNP,0.07010229784784382)\n(SNP,0.08278490043211448)\n(SNP,0.0781111400710307)\n(SNP,0.045217392090737156)\n(SNP,0.029094757314731903)\n(SNP,-0.002543976151770442)\n(SNP,0.05935545505935556)\n(SNP,0.0469273600491024)\n(SNP,-0.03478112922824805)\n(SNP,-0.033286068810735606)\n(SNP,-0.044725693047761306)\n(SNP,-0.09660229203182608)\n(SNP,-0.0732114321665795)\n(SNP,-0.06282719790210095)\n(SNP,0.002368336587052784)\n(SNP,-0.047491876288709635)\n(SNP,-0.09747414772047111)\n(SNP,-0.07169538968811404)\n(SNP,-0.08296712758121351)\n(SNP,-0.07985862755184636)\n(SNP,-0.09384230848664055)\n(SNP,-0.11561920870652916)\n(SNP,-0.12476706934516482)\n(SNP,-0.0874226826608507)\n(SNP,-0.05247437810505366)\n(SNP,-0.00532120635873894)\n(SNP,0.05189069411392125)\n(SNP,0.07689240140297211)\n(SNP,0.027265861262129727)\n(SNP,0.10457791501301282)\n(SNP,0.14717812745565617)\n(SNP,0.14659571092802468)\n(SNP,0.10834476332644784)\n(SNP,0.1231769264161185)\n(SNP,0.1888251238359421)\n(SNP,0.22370937330228252)\n(SNP,0.19139458377175306)\n(SNP,0.14168221370600273)\n(SNP,0.18898515728467782)\n(SNP,0.16651917064304256)\n(SNP,0.31675637501820136)\n(SNP,0.284636234019428)\n(SNP,0.28355856146328845)\n(SNP,0.1784999547666698)\n(SNP,0.10718743917480365)\n(SNP,0.13994407533376008)\n(SNP,0.1989193255278655)\n(SNP,0.1384971895353746)\n(SNP,0.13774280265429628)\n(SNP,0.08469547035685807)\n(SNP,0.0867253881661772)\n(SNP,0.06343128166404809)\n(SNP,0.10535993196549479)\n(SNP,0.0922946720501463)\n(SNP,0.01911779429839108)\n(SNP,0.042332338786417546)\n(SNP,0.054565153948774744)\n(SNP,0.007599986565333456)\n(SNP,-0.0613226353811944)\n(SNP,-0.02213928490511734)\n(SNP,0.01259813697890258)\n(SNP,0.0016632292094461729)\n(SNP,0.07881134876042303)\n(SNP,0.11402935699095337)\n(SNP,0.11070346881860714)\n(SNP,0.05741942676379706)\n(SNP,0.08508656874421085)\n(SNP,0.0888581262561505)\n(SNP,0.04199032678650756)\n(SNP,0.0011425288380399932)\n(SNP,-0.028994839328205006)\n(SNP,-0.05317368110438053)\n(SNP,-0.045224980870219283)\n(SNP,-0.027718758346604203)\n(SNP,0.04234283357796419)\n(SNP,1.2210976801071779E-4)\n(SNP,0.03889668629939624)\n(SNP,0.03246578998317861)\n(SNP,0.01585091301039826)\n(SNP,0.09155487316198858)\n(SNP,0.032127565003138035)\n(SNP,0.02834468487067337)\n(SNP,0.0067936680134579805)\n(SNP,-0.07890413005199359)\n(SNP,-0.06255348966263333)\n(SNP,-0.0686405776562274)\n(SNP,-0.06766186719651546)\n(SNP,-0.07364870526842959)\n(SNP,-0.10689324448750277)\n(SNP,-0.09227942854310922)\n(SNP,-0.07350241512930081)\n(SNP,-0.08675742282858816)\n(SNP,-0.06990341891204895)\n(SNP,-0.044224678844598686)\n(SNP,-0.059774040987913966)\n(SNP,-0.06824146564848638)\n(SNP,-0.013610172914015995)\n(SNP,-0.013628350669838779)\n(SNP,-0.03685707012670934)\n(SNP,-0.044823498337881865)\n(SNP,-0.046839968166775055)\n(SNP,-0.005192702995254078)\n(SNP,0.01728357376156763)\n(SNP,0.07600944529830947)\n(SNP,0.07450722071218298)\n(SNP,0.027595739966863795)\n(SNP,0.029001423502090853)\n(SNP,0.06518097170518339)\n(SNP,0.06243079058906366)\n(SNP,0.07253599616112943)\n(SNP,0.09010982514188841)\n(SNP,0.055384697874971155)\n(SNP,0.007271809233699963)\n(SNP,0.05256249629456686)\n(SNP,0.07498000332411599)\n(SNP,0.07670824044912963)\n(SNP,0.0813264092294667)\n(SNP,0.09485340031618252)\n(SNP,0.07485805852207389)\n(SNP,0.06703630968107949)\n(SNP,0.1394344857611427)\n(SNP,0.16372306726113373)\n(SNP,0.15417195039461778)\n(SNP,0.11934206330304378)\n(SNP,0.07593531675196019)\n(SNP,0.07630523676793179)\n(SNP,0.06450083840897129)\n(SNP,0.1125120477610009)\n(SNP,0.07994808171512252)\n(SNP,0.006007420848528327)\n(SNP,0.01672758465614636)\n(SNP,-0.046288345502103576)\n(SNP,-0.028063242560929444)\n(SNP,4.590314594572026E-4)\n(SNP,-0.038896349125837275)\n(SNP,-0.03901622222506917)\n(SNP,-0.06368059363194821)\n(SNP,-0.09502456402513122)\n(SNP,-0.06535447524121889)\n(SNP,-0.06886036548596453)\n(SNP,-2.2632651008399273E-4)\n(SNP,0.024781211475144702)\n(SNP,0.05781141515753888)\n(SNP,0.08752926646921098)\n(SNP,0.0551419633018368)\n(SNP,0.05048994067353977)\n(SNP,0.052803274528757764)\n(SNP,-0.008991872597432435)\n(SNP,-0.002457278517616463)\n(SNP,-0.04435889177496153)\n(SNP,-0.04181921427927745)\n(SNP,-0.05551940167076122)\n(SNP,-0.05776715125635235)\n(SNP,-0.004079360529217305)\n(SNP,-0.03160310718770466)\n(SNP,-0.0012625043184035201)\n(SNP,0.0411891241784757)\n(SNP,0.0077420300520379)\n(SNP,0.0243930494303498)\n(SNP,0.029983817780769913)\n(SNP,0.026865718491356473)\n(SNP,0.030309989562915834)\n(SNP,-0.03287954095251753)\n(SNP,0.0048723397225000735)\n(SNP,0.014249644251309259)\n(SNP,-0.003898601077858007)\n(SNP,-1.1649400535443056E-4)\n(SNP,-0.006242018841014337)\n(SNP,-0.031134069063013123)\n(SNP,-0.03980326431346968)\n(SNP,-0.04669042946368719)\n(SNP,-0.06513272042043317)\n(SNP,-0.06810998891880765)\n(SNP,-0.029118592464099383)\n(SNP,0.0014964659319742456)\n(SNP,0.021187452497085243)\n(SNP,0.020588625136014026)\n(SNP,0.026682065584270807)\n(SNP,0.022356742746509353)\n(SNP,0.05271759328387129)\n(SNP,0.10995462360664399)\n(SNP,0.10442879383039663)\n(SNP,0.06838612919029959)\n(SNP,0.0348276317835905)\n(SNP,-0.0017099066377044547)\n(SNP,-0.008433986875244891)\n(SNP,-0.0018078080730222562)\n(SNP,-0.0011388952942296639)\n(SNP,-0.02065281199015933)\n(SNP,-0.04699383705412972)\n(SNP,-0.055111115931972925)\n(SNP,-0.05057345657483931)\n(SNP,-0.04109750965803021)\n(SNP,-0.03208870581148001)\n(SNP,0.0026436091650160433)\n(SNP,-0.011206769173570576)\n(SNP,0.0022803991138015535)\n(SNP,0.016553300070444508)\n(SNP,0.012617212348252995)\n(SNP,0.03304728702513087)\n(SNP,0.0177173375780334)\n(SNP,0.021197614789649814)\n(SNP,0.0404672638422706)\n(SNP,0.008254075905885255)\n(SNP,0.017859256889482214)\n(SNP,0.0013651878686221073)\n(SNP,-0.038701718894770976)\n(SNP,-0.004000960082271584)\n(SNP,-0.026826827707716678)\n(SNP,-0.010965307344816324)\n(SNP,-0.007599649573447039)\n(SNP,-0.05431454936647131)\n(SNP,-0.05252988180852485)\n(SNP,-0.05252502471572335)\n(SNP,-0.03680984285501514)\n(SNP,3.4809142188094763E-4)\n(SNP,-0.010903202236924148)\n(SNP,-0.012456678919070286)\n(SNP,-0.04560530294198994)\n(SNP,-0.05120581722247336)\n(SNP,-0.005635491741858302)\n(SNP,0.0068402740213773855)\n(SNP,0.0493826679797878)\n(SNP,0.041165504765110314)\n(SNP,0.013685803281635114)\n(SNP,-0.007890484756655228)\n(SNP,0.0019854940202581)\n(SNP,0.02802400234931748)\n(SNP,0.03626055722151278)\n(SNP,0.0430483188966193)\n(SNP,0.04135870329908836)\n(SNP,-0.011651663291346013)\n(SNP,-0.001132842428150525)\n(SNP,0.010755241136003364)\n(SNP,0.022339064066209866)\n(SNP,0.035202086900595495)\n(SNP,0.03459912749064982)\n(SNP,0.014647757527718063)\n(SNP,0.014450891008721966)\n(SNP,0.007210771112598239)\n(SNP,-0.00824072430361964)\n(SNP,-0.020188283309914356)\n(SNP,-0.011659565183840107)\n(SNP,-9.152386252963918E-4)\n(SNP,-0.028262384817851382)\n(SNP,-0.034455438378292194)\n(SNP,-0.026237364615737304)\n(SNP,-0.031453003924319094)\n(SNP,-0.03625004751420727)\n(SNP,-0.02354296649839504)\n(SNP,-0.041092729688789624)\n(SNP,-0.07341653152081848)\n(SNP,-0.07282708952560282)\n(SNP,-0.0878331824874539)\n(SNP,-0.07836734785268043)\n(SNP,-0.06047763550900745)\n(SNP,-0.06906689347296831)\n(SNP,-0.07263288118967019)\n(SNP,-0.05613994799669067)\n(SNP,-0.03440371759531966)\n(SNP,-0.03807165730708661)\n(SNP,-0.07681862323306632)\n(SNP,-0.058180932418699254)\n(SNP,-0.054915817473311576)\n(SNP,-0.05447725599305558)\n(SNP,-0.03488378368448209)\n(SNP,-0.04615386062888207)\n(SNP,-0.06060609893070492)\n(SNP,-0.04550567741613996)\n(SNP,-0.005782690750672292)\n(SNP,0.016454810024942364)\n(SNP,0.01915303557403706)\n(SNP,0.01646802740747011)\n(SNP,0.009668875068637287)\n(SNP,-0.014274450721553165)\n(SNP,-0.007597974278751059)\n(SNP,0.041455600717440554)\n(SNP,0.03732814767067837)\n(SNP,0.02210164374839276)\n(SNP,0.04251125631834073)\n(SNP,0.04605601987601837)\n(SNP,0.05295048805256166)\n(SNP,0.05129210755666742)\n(SNP,0.0644347158819546)\n(SNP,0.06017457677230765)\n(SNP,0.020862781317213717)\n(SNP,0.011742310309537632)\n(SNP,0.005184547556122939)\n(SNP,0.009973437823171822)\n(SNP,0.029352342072486933)\n(SNP,0.016637378033525198)\n(SNP,0.00274520872787726)\n(SNP,6.240389415876461E-4)\n(SNP,0.026986078663405057)\n(SNP,0.01955862489675901)\n(SNP,0.0033694998575627116)\n(SNP,0.02641852137608758)\n(SNP,0.023750026484376664)\n(SNP,0.0033184978294925065)\n(SNP,0.007998032041149844)\n(SNP,0.049402792989362176)\n(SNP,0.05188974808256817)\n(SNP,0.05008622994886601)\n(SNP,0.04476148548942456)\n(SNP,0.05746279250205387)\n(SNP,0.015810798279465563)\n(SNP,0.036752003788229744)\n(SNP,0.03748612121734946)\n(SNP,0.055297917997843594)\n(SNP,0.024902205916070282)\n(SNP,0.014941302204924787)\n(SNP,-0.002936889304761956)\n(SNP,-0.03601702984853907)\n(SNP,-0.02587629999854499)\n(SNP,0.009531853166845477)\n(SNP,-0.03014951621826908)\n(SNP,-0.021017796790388035)\n(SNP,-0.03053788422919206)\n(SNP,-0.04986698947432636)\n(SNP,-0.05865177075186099)\n(SNP,-0.05337586520260178)\n(SNP,-0.010989048021576828)\n(SNP,-0.04250180113507852)\n(SNP,-0.06872240864440773)\n(SNP,-0.08075280785398033)\n(SNP,-0.09033894141083822)\n(SNP,-0.11526073673526073)\n(SNP,-0.052727765531606595)\n(SNP,-0.03859984152412869)\n(SNP,-0.04032863033749721)\n(SNP,-0.037037002743481776)\n(SNP,-0.024842308632117747)\n(SNP,-0.022587167194064405)\n(SNP,0.006208784840390623)\n(SNP,-0.002519199418636753)\n(SNP,8.093055164736186E-4)\n(SNP,-0.057076646644297076)\n(SNP,-0.008520681092132575)\n(SNP,-0.042282727025893106)\n(SNP,-0.014871846725840087)\n(SNP,0.010991736428508083)\n(SNP,0.05291488623195346)\n(SNP,0.05277668165511311)\n(SNP,0.02711688372592451)\n(SNP,0.013070892529922447)\n(SNP,0.06925690336041163)\n(SNP,-0.013411355389055923)\n(SNP,0.02857538074622862)\n(SNP,-0.010671500191313297)\n(SNP,0.0019187517706736007)\n(SNP,-0.02556440857097861)\n(SNP,-0.01870564838362706)\n(SNP,0.03533063421757341)\n(SNP,0.05879226170748927)\n(SNP,0.04347833958833806)\n(SNP,0.06717694249469539)\n(SNP,0.06741275661849234)\n(SNP,0.09997380294487)\n(SNP,0.05515116743072685)\n(SNP,0.06475562392231071)\n(SNP,0.05350106951967473)\n(SNP,0.04137506508594162)\n(SNP,0.055402011442261555)\n(SNP,-0.003176942737611402)\n(SNP,0.00878054684097311)\n(SNP,-0.00912793870571192)\n(SNP,-0.04173654478342937)\n(SNP,-0.0304900090008478)\n(SNP,-0.015144231315296694)\n(SNP,-0.030398071430546222)\n(SNP,-0.0385309086544232)\n(SNP,-0.040709428418269814)\n(SNP,-0.012870887314649504)\n(SNP,-0.013240211998056717)\n(SNP,-0.01381802581623329)\n(SNP,-0.024460166869102275)\n(SNP,-0.036565446848347935)\n(SNP,-0.05296553769705409)\n(SNP,-0.03956198256093467)\n(SNP,-0.01073643080354943)\n(SNP,-0.003474450967544995)\n(SNP,-0.012541861110780674)\n(SNP,-0.009814823058305928)\n(SNP,0.020070727849181763)\n(SNP,0.02980685685045405)\n(SNP,0.04650240691697368)\n(SNP,0.03247421349904362)\n(SNP,0.06994806632393438)\n(SNP,0.02877327034898361)\n(SNP,0.013198967655245515)\n(SNP,0.022761557413520116)\n(SNP,0.017942259819994436)\n(SNP,0.008538547209503746)\n(SNP,-0.008198919050958436)\n(SNP,-0.021165914242593776)\n(SNP,-0.023964016475287182)\n(SNP,-0.04927364705046306)\n(SNP,-0.028704662841249493)\n(SNP,-0.02052363228404487)\n(SNP,-0.023361638633774946)\n(SNP,8.628991359940467E-4)\n(SNP,-0.003803656441717707)\n(SNP,0.02154317681581839)\n(SNP,0.004678730636253516)\n(SNP,0.0049871992971663075)\n(SNP,-0.005348109547750775)\n(SNP,-5.051781263124154E-4)\n(SNP,0.001882158234541394)\n(SNP,-0.005287687604663693)\n(SNP,-0.017733928789826835)\n(SNP,-0.024879947656609277)\n(SNP,-0.010299093197601486)\n(SNP,0.015985049211459865)\n(SNP,0.03829996085252684)\n(SNP,0.0412238099331834)\n(SNP,0.03651760540991706)\n(SNP,0.021289867970197406)\n(SNP,0.04543730252656392)\n(SNP,0.04488451379716596)\n(SNP,0.04345071420298996)\n(SNP,0.01523777216953002)\n(SNP,0.03419209528760929)\n(SNP,0.03970597008362588)\n(SNP,0.051149712940478716)\n(SNP,0.04083865907830431)\n(SNP,0.04782336107476059)\n(SNP,0.03571432419578228)\n(SNP,0.048716106803608536)\n(SNP,0.04950978569275247)\n(SNP,0.07419149934054299)\n(SNP,0.05965506367825536)\n(SNP,0.04785479557326277)\n(SNP,0.045268298797462844)\n(SNP,0.048840647556880654)\n(SNP,0.041895954280534456)\n(SNP,0.027352355987197152)\n(SNP,0.004347895085071789)\n(SNP,0.02595162779421151)\n(SNP,0.029762641794293915)\n(SNP,0.07325351103355295)\n(SNP,0.07322830941604906)\n(SNP,0.0832588387711324)\n(SNP,0.07805693677020939)\n(SNP,0.0673929334518043)\n(SNP,0.09534654412074575)\n(SNP,0.08885851092342797)\n(SNP,0.0485664637597924)\n(SNP,0.05361283370424536)\n(SNP,0.03275757423923227)\n(SNP,0.0035635257985166496)\n(SNP,-0.010743843086196686)\n(SNP,-0.0176093012965827)\n(SNP,0.02104595501662389)\n(SNP,0.0061285447816406624)\n(SNP,0.040803515806690956)\n(SNP,0.07858921349920195)\n(SNP,0.06334416556775894)\n(SNP,0.03732778136330677)\n(SNP,0.04605739047699406)\n(SNP,0.03498324117498119)\n(SNP,0.06948542735675418)\n(SNP,0.03390704185567702)\n(SNP,0.00433622781351812)\n(SNP,-0.042923291545268326)\n(SNP,-0.07485095204221813)\n(SNP,-0.07640803691634603)\n(SNP,-0.0728541611300916)\n(SNP,-0.05401347276465433)\n(SNP,-0.051861421840522795)\n(SNP,-0.0629991823227761)\n(SNP,-0.05263158314446438)\n(SNP,-0.04060441981286569)\n(SNP,-0.01743505067062821)\n(SNP,-0.0018265607121488007)\n(SNP,0.0074626654838804915)\n(SNP,0.007635239086017391)\n(SNP,-0.009498764870751504)\n(SNP,-0.016069042456686035)\n(SNP,-0.009785259662058907)\n(SNP,-0.023358514171592126)\n(SNP,-0.010393345856851623)\n(SNP,-0.010796280179543314)\n(SNP,0.024865350106193337)\n(SNP,0.012063482119760991)\n(SNP,-0.017049053369260807)\n(SNP,-0.019286031927865346)\n(SNP,-0.011680662286848217)\n(SNP,-0.021570502374131325)\n(SNP,0.0046325576883491214)\n(SNP,0.02944998089649032)\n(SNP,0.018694455037160298)\n(SNP,-0.009872892539953031)\n(SNP,-0.018820442418681055)\n(SNP,-0.0042826768429411995)\n(SNP,0.025423663348286905)\n(SNP,0.03304866383075081)\n(SNP,0.033775021353442465)\n(SNP,0.045362019490982675)\n(SNP,0.04417339454551071)\n(SNP,0.05473649557538948)\n(SNP,0.05813091614561717)\n(SNP,0.06553693032013519)\n(SNP,0.05677419721123854)\n(SNP,0.048315291815813406)\n(SNP,0.0697033972143429)\n(SNP,0.07070062660465253)\n(SNP,0.039700430450344326)\n(SNP,0.0208501313628148)\n(SNP,0.009252680184525016)\n(SNP,0.03398501491624167)\n(SNP,0.02540259203738526)\n(SNP,0.041717656189519045)\n(SNP,0.018091865218667066)\n(SNP,9.919787078613126E-5)\n(SNP,0.013441944926254775)\n(SNP,0.04588056286019306)\n(SNP,0.0597927780936634)\n(SNP,0.09347285966481605)\n(SNP,0.07339534755468959)\n(SNP,0.08768172413306778)\n(SNP,0.07980063099235052)\n(SNP,0.10106208576330704)\n(SNP,0.07535386149641508)\n(SNP,0.07406328711333829)\n(SNP,0.010000085471702893)\n(SNP,-0.041523155428446784)\n(SNP,-0.050487626008844495)\n(SNP,-0.04236288731078783)\n(SNP,-0.06043768559730602)\n(SNP,-0.03708721142038238)\n(SNP,-0.0321881839583695)\n(SNP,0.009300101802952213)\n(SNP,-0.011988579628422277)\n(SNP,-0.030917288504092325)\n(SNP,2.9132590050143193E-4)\n(SNP,-0.04664548913619718)\n(SNP,-0.04933034379673967)\n(SNP,-0.020614603203737553)\n(SNP,-0.026397350125015904)\n(SNP,-0.06912607988407382)\n(SNP,-0.08384269918475029)\n(SNP,-0.08439005807728182)\n(SNP,-0.032771113884744345)\n(SNP,-0.011943942078765209)\n(SNP,0.02859157469411356)\n(SNP,0.007143595878305137)\n(SNP,-0.024556617601115438)\n(SNP,-0.02219224130681971)\n(SNP,-0.01961567234171664)\n(SNP,-0.009261014848956178)\n(SNP,-0.009067318379220344)\n(SNP,-0.03607373373561211)\n(SNP,-0.03498774447174442)\n(SNP,-0.03337575707279305)\n(SNP,-0.02649993130233399)\n(SNP,-8.990809550083144E-4)\n(SNP,-0.0019735642197201116)\n(SNP,0.014699836217848969)\n(SNP,-0.004422575266536664)\n(SNP,0.00894933168222552)\n(SNP,0.030704012434777744)\n(SNP,0.02607189202786095)\n(SNP,0.03290806127614667)\n(SNP,0.029649962222724733)\n(SNP,0.034096601021829924)\n(SNP,0.033715651572078245)\n(SNP,0.06287727427441937)\n(SNP,0.06895505648435422)\n(SNP,0.03737279986436521)\n(SNP,0.05496490747065736)\n(SNP,0.021240636079032715)\n(SNP,0.009704892057833283)\n(SNP,-0.005307095823095819)\n(SNP,-0.024656759085832192)\n(SNP,-0.01367764692799953)\n(SNP,-0.03237111216280179)\n(SNP,-0.034473000012381974)\n(SNP,-0.010952051740919526)\n(SNP,-0.024624482777124233)\n(SNP,-0.009621800915715895)\n(SNP,-0.020485438484305896)\n(SNP,-0.0061259458711803525)\n(SNP,0.0)\n(SNP,-0.043056699678334906)\n(SNP,-0.04440968752105548)\n(SNP,-0.056050077750177195)\n(SNP,-0.05274408221195153)\n(SNP,-0.05175935629511163)\n(SNP,-0.040039400195110916)\n(SNP,-0.02547326002365032)\n(SNP,-0.03429755579272512)\n(SNP,-0.029741172689833548)\n(SNP,-0.01732872992820142)\n(SNP,-0.011976682564917825)\n(SNP,0.0016581348353051151)\n(SNP,0.0027687963715172536)\n(SNP,4.111842062995687E-4)\n(SNP,-0.02289909297474044)\n(SNP,-0.02888528421914587)\n(SNP,-0.020485998533765756)\n(SNP,-0.01757439370724475)\n(SNP,0.009590605638566639)\n(SNP,0.014297660293948635)\n(SNP,0.03434712287356329)\n(SNP,0.01973601494344951)\n(SNP,0.01839281732025456)\n(SNP,0.027097646234543197)\n(SNP,0.03341018224194695)\n(SNP,0.03247503060825165)\n(SNP,0.004784056212002794)\n(SNP,-0.003881573113004502)\n(SNP,-0.016036813402182066)\n(SNP,-0.0343068227368203)\n(SNP,-0.029983897912544875)\n(SNP,-0.041166334493626694)\n(SNP,-0.042680954888944043)\n(SNP,-0.048545759573239367)\n(SNP,-0.06056591371534491)\n(SNP,-0.02991397804363619)\n(SNP,-0.038863795230828155)\n(SNP,-0.0327001369895237)\n(SNP,-0.004039399274986955)\n(SNP,0.0074434304742450885)\n(SNP,0.0501947306216316)\n(SNP,0.0666097978311408)\n(SNP,0.07413726980876911)\n(SNP,0.09643514027993444)\n(SNP,0.07970551898331789)\n(SNP,0.08609840425148854)\n(SNP,0.08692859915524774)\n(SNP,0.057196300216152206)\n(SNP,0.03612101627625465)\n(SNP,5.009819639278778E-4)\n(SNP,-0.02603749210195472)\n(SNP,-0.022114152446300207)\n(SNP,-0.02520013885166799)\n(SNP,-0.029449610227287513)\n(SNP,-0.0444007572573823)\n(SNP,-0.033866470531851156)\n(SNP,-0.03688772668799737)\n(SNP,-0.030008856492729066)\n(SNP,-0.0031046971077556395)\n(SNP,0.007169907231583031)\n(SNP,0.00902536226471867)\n(SNP,0.008313037644486505)\n(SNP,0.011098779032585646)\n(SNP,0.00483135274638823)\n(SNP,0.028308615227388874)\n(SNP,-0.002757573675886308)\n(SNP,-0.021850143390854542)\n(SNP,-0.062487335492505645)\n(SNP,-0.06996843852077203)\n(SNP,-0.12261303251937883)\n(SNP,-0.16167305419302555)\n(SNP,-0.15679764883793612)\n(SNP,-0.14424552144478367)\n(SNP,-0.15036767343207455)\n(SNP,-0.10569438596430865)\n(SNP,-0.09217115303607265)\n(SNP,-0.060758719419271266)\n(SNP,-0.06845269845610484)\n(SNP,-0.046964502794146754)\n(SNP,0.02914369397944186)\n(SNP,0.06294044251477096)\n(SNP,0.08224741576795762)\n(SNP,0.07614921945902843)\n(SNP,0.02290422767212095)\n(SNP,0.10348400716895494)\n(SNP,0.10108372959402474)\n(SNP,0.1569431796082818)\n(SNP,0.17259609997341704)\n(SNP,0.11292396780729293)\n(SNP,0.07303370868577201)\n(SNP,0.0543467296451325)\n(SNP,0.07141307608695652)\n(SNP,0.08262442707393934)\n(SNP,-0.0077107218596210725)\n(SNP,-0.04144643471624024)\n(SNP,-0.04941145182386691)\n(SNP,-0.03044269417324264)\n(SNP,0.010785403254297419)\n(SNP,0.016439717449630513)\n(SNP,0.007962210498038596)\n(SNP,-3.0438266294862104E-4)\n(SNP,0.0033091208900996537)\n(SNP,-0.052714519966684865)\n(SNP,-0.002810463885550972)\n(SNP,-0.008752247331769476)\n(SNP,0.028121312143314016)\n(SNP,0.009219837914646279)\n(SNP,0.005253992397568207)\n(SNP,0.012264838099875641)\n(SNP,-0.010960056829713846)\n(SNP,-0.011337765993494344)\n(SNP,0.08635408395572461)\n(SNP,0.054308802756734935)\n(SNP,0.040917467036393526)\n(SNP,-0.046889430270219745)\n(SNP,-0.06405259963262572)\n(SNP,-0.044988626101310616)\n(SNP,-0.05667934428664209)\n(SNP,-0.039400822466686816)\n(SNP,-0.03659304438109659)\n(SNP,-0.061224518533943374)\n(SNP,-0.03732251205547161)\n(SNP,-0.05089488930490436)\n(SNP,-0.0025893947287798126)\n(SNP,0.03509545164250503)\n(SNP,0.02392950780656141)\n(SNP,0.050397304373366064)\n(SNP,0.05041656059957796)\n(SNP,0.049020603830754274)\n(SNP,0.039782597826086945)\n(SNP,-0.0017088540180374946)\n(SNP,0.04653961168737745)\n(SNP,0.04034625639223979)\n(SNP,0.06346678657908393)\n(SNP,0.07315030545274166)\n(SNP,0.0981347014190974)\n(SNP,0.045047889469990776)\n(SNP,0.07778011622323802)\n(SNP,0.11875396318998502)\n(SNP,0.14774794209637257)\n(SNP,0.10289519784529062)\n(SNP,0.07142856028874436)\n(SNP,0.02241711890177531)\n(SNP,-4.883593750000526E-4)\n(SNP,-0.03887888411729684)\n(SNP,9.728520090766912E-5)\n(SNP,-0.019142400825849854)\n(SNP,-0.042422004043487074)\n(SNP,-0.05192029317599079)\n(SNP,-0.02275737531175398)\n(SNP,-0.002134944201843745)\n(SNP,0.01656588448902295)\n(SNP,0.029995165998645067)\n(SNP,0.04477179360910332)\n(SNP,0.03132902407070518)\n(SNP,0.026932094067135075)\n(SNP,0.01619820452771275)\n(SNP,0.019467232274823762)\n(SNP,-0.004638148971931498)\n(SNP,-0.005543120035580239)\n(SNP,-0.019842698024876138)\n(SNP,-0.03984060064050276)\n(SNP,-0.04426285938550353)\n(SNP,-0.0378301247828372)\n(SNP,-0.026225778922218012)\n(SNP,-0.003744901382362325)\n(SNP,0.00974049552048419)\n(SNP,0.019803982118627526)\n(SNP,0.03813807149120234)\n(SNP,0.03823958058404642)\n(SNP,0.051669649756276914)\n(SNP,0.042281242264011254)\n(SNP,0.03206191752071847)\n(SNP,0.026541774004683803)\n(SNP,0.013975932799536009)\n(SNP,0.0534861635235623)\n(SNP,0.03988575040239413)\n(SNP,0.07403914321999677)\n(SNP,0.07959683946477995)\n(SNP,0.07787692594052824)\n(SNP,0.10367928888750691)\n(SNP,0.10032301350267961)\n(SNP,0.09039913412168128)\n(SNP,0.0811786779355639)\n(SNP,0.031187698603250203)\n(SNP,0.06600142131092711)\n(SNP,0.026574322858424457)\n(SNP,0.03472655272977322)\n(SNP,0.014205934910128334)\n(SNP,8.546029721272372E-5)\n(SNP,0.008893170744022454)\n(SNP,0.022404299747563406)\n(SNP,0.04070687604548749)\n(SNP,0.039739740456123454)\n(SNP,0.018892298583346366)\n(SNP,0.03460062573433904)\n(SNP,0.03263334066503621)\n(SNP,0.06548083345645352)\n(SNP,0.069829130592449)\n(SNP,0.033547239190058045)\n(SNP,0.030013756737541177)\n(SNP,0.027625201108814827)\n(SNP,0.019364079802607147)\n(SNP,-0.006405326644798344)\n(SNP,-0.011478092864676957)\n(SNP,-0.0342152480297402)\n(SNP,-0.03516410336172683)\n(SNP,-0.05392672193251674)\n(SNP,9.10838799550153E-4)\n(SNP,6.62251655629125E-4)\n(SNP,-0.07102921322923789)\n(SNP,-0.06370792625187402)\n(SNP,-0.03749259256554287)\n(SNP,-0.06022892874637811)\n(SNP,-0.06282228324812703)\n(SNP,-0.052829592122872034)\n(SNP,-0.03783150778015565)\n(SNP,-0.05749510258107211)\n(SNP,-0.05253148577101252)\n(SNP,0.002654840707964644)\n(SNP,-0.015415973856366252)\n(SNP,0.0015862782415494317)\n(SNP,0.022577814537483407)\n(SNP,0.04637301432022706)\n(SNP,0.016856412506737903)\n(SNP,0.015359041328325964)\n(SNP,0.008777346354944066)\n(SNP,-0.0021828255749319478)\n(SNP,0.021977026177679316)\n(SNP,0.054170682496439575)\n(SNP,-0.020501592608887034)\n(SNP,-0.03390125232790765)\n(SNP,-0.04543881350840296)\n(SNP,-0.039489673988353076)\n(SNP,-0.02402969183213228)\n(SNP,-0.012790464316995811)\n(SNP,-0.02572633994252447)\n(SNP,-0.06615429136303434)\n(SNP,-0.06871522625580442)\n(SNP,-0.026140802702522583)\n(SNP,-0.017005614846241086)\n(SNP,-0.027007444332442072)\n(SNP,-0.029095483641211783)\n(SNP,-0.0483571504289129)\n(SNP,-0.062488849042438205)\n(SNP,-0.04293150235536672)\n(SNP,-0.01969846681478895)\n(SNP,-0.021173345360464297)\n(SNP,-0.013836454201641944)\n(SNP,-0.022334097336426377)\n(SNP,-0.015410332343111717)\n(SNP,-0.013494676970535377)\n(SNP,-9.307212916906213E-4)\n(SNP,0.012033420737987566)\n(SNP,-0.01707959898947446)\n(SNP,-0.011226387427908772)\n(SNP,-0.008989541145097518)\n(SNP,-0.016742962935456164)\n(SNP,-0.009362354238124978)\n(SNP,0.012540005775410215)\n(SNP,-0.0023584812655744352)\n(SNP,-0.004750666443931075)\n(SNP,-0.017185276677849942)\n(SNP,-0.0012411495841789003)\n(SNP,-0.012689657838650552)\n(SNP,-0.03760748512170396)\n(SNP,-0.03719555745814311)\n(SNP,-0.0550043279935325)\n(SNP,-0.0818511654233106)\n(SNP,-0.07782509115012248)\n(SNP,-0.08976046772441708)\n(SNP,-0.11701324809981342)\n(SNP,-0.10715993144670415)\n(SNP,-0.1067839161258552)\n(SNP,-0.09680896796500613)\n(SNP,-0.08497196665432373)\n(SNP,-0.09240919738838259)\n(SNP,-0.077789070092863)\n(SNP,-0.07065222072618714)\n(SNP,-0.0680720836621509)\n(SNP,-0.01926789746020227)\n(SNP,-0.026552463663917114)\n(SNP,-0.03191598138677822)\n(SNP,-0.04880970598511663)\n(SNP,-0.04751093267583763)\n(SNP,-0.029862182476301666)\n(SNP,-0.006818399218194141)\n(SNP,0.026260667716297165)\n(SNP,0.0035309615179471066)\n(SNP,0.003056112402714178)\n(SNP,0.002639694352824285)\n(SNP,0.025368696631999418)\n(SNP,0.019771360451916704)\n(SNP,0.028114725265342116)\n(SNP,0.028055336889179015)\n(SNP,0.007418946099621765)\n(SNP,-0.020320343646519173)\n(SNP,-0.0016492908372655651)\n(SNP,-0.029814963537266866)\n(SNP,-0.04760850310251763)\n(SNP,-0.052425029094280595)\n(SNP,-0.018267266010737707)\n(SNP,-0.042231964641130264)\n(SNP,-0.0148049944140425)\n(SNP,-0.017476357057015737)\n(SNP,-0.023156278198736106)\n(SNP,-0.019713646242891847)\n(SNP,-0.021758669807088273)\n(SNP,-0.013130729339042014)\n(SNP,-0.026340074825860257)\n(SNP,-0.04394979251370815)\n(SNP,-0.02924229115118671)\n(SNP,-0.03128858465701192)\n(SNP,-0.02494698428413735)\n(SNP,-0.021907651564127148)\n(SNP,-0.008425974893584098)\n(SNP,0.004815375079639077)\n(SNP,0.03839869460311356)\n(SNP,0.06520982459655336)\n(SNP,0.04895510330853491)\n(SNP,0.047794093361075644)\n(SNP,0.017249399206950646)\n(SNP,-0.00114725802177686)\n(SNP,0.007810728502552117)\n(SNP,0.01574890079595616)\n(SNP,0.029666820835245543)\n(SNP,0.022367102275693107)\n(SNP,-0.0024399023795064383)\n(SNP,0.03414925752070641)\n(SNP,0.05829091180861248)\n(SNP,0.08171154256440906)\n(SNP,0.08993799988300032)\n(SNP,0.08582181542992724)\n(SNP,0.0648075857758794)\n(SNP,0.05551868720204042)\n(SNP,0.056068647407717026)\n(SNP,0.06414675175913012)\n(SNP,0.05360474172351164)\n(SNP,0.03411759321799362)\n(SNP,0.015360338280940461)\n(SNP,0.008746928114099719)\n(SNP,-0.010916384438103012)\n(SNP,-0.007751917114518302)\n(SNP,-0.024671926509186416)\n(SNP,-0.006454372200141879)\n(SNP,-0.003343000592509425)\n(SNP,0.002193982563413234)\n(SNP,-0.01603050019776603)\n(SNP,-0.019272533340849017)\n(SNP,-0.01117840635073164)\n(SNP,-0.028759439363690582)\n(SNP,-0.05912164211231363)\n(SNP,-0.041873003680010755)\n(SNP,-0.05699917583817111)\n(SNP,-0.04182407625291159)\n(SNP,-0.05295526781126027)\n(SNP,-0.033529680106077674)\n(SNP,-0.03254096212447879)\n(SNP,-0.00496570533472175)\n(SNP,0.019995618662539547)\n(SNP,0.037365249521602806)\n(SNP,0.04100652873856405)\n(SNP,0.02266675731852557)\n(SNP,0.012252534422223786)\n(SNP,0.012878381381249021)\n(SNP,0.0073954546141182485)\n(SNP,-0.005569553590457831)\n(SNP,-0.016670249522419776)\n(SNP,-0.005034858168931112)\n(SNP,5.409086577510035E-4)\n(SNP,0.005720041750922694)\n(SNP,0.012711777349937158)\n(SNP,0.006808657387729071)\n(SNP,0.02466846203714075)\n(SNP,0.02914817936153624)\n(SNP,0.08093561000971757)\n(SNP,0.06295233376010519)\n(SNP,0.07934964982878878)\n(SNP,0.08972970020744979)\n(SNP,0.08713370951887577)\n(SNP,0.08722249340797616)\n(SNP,0.113675435469914)\n(SNP,0.11708561195521092)\n(SNP,0.1150739419377537)\n(SNP,0.09052125455912897)\n(SNP,0.08279148299515027)\n(SNP,0.055261921275622315)\n(SNP,0.0500992787757508)\n(SNP,0.02398580641567086)\n(SNP,0.023682642355608362)\n(SNP,-9.636626691800192E-5)\n(SNP,0.0017088673854445326)\n(SNP,0.01928499529633123)\n(SNP,0.019843451826539054)\n(SNP,0.0038465053367717837)\n(SNP,0.009074515892788173)\n(SNP,0.005479423661035125)\n(SNP,0.01677262386736072)\n(SNP,-5.783208020050192E-4)\n(SNP,0.009446684017736712)\n(SNP,-0.03468863812085897)\n(SNP,-0.05205354185757011)\n(SNP,-0.07719010479493045)\n(SNP,-0.05327100099571974)\n(SNP,-0.035690701570002085)\n(SNP,-0.02978483566259206)\n(SNP,-0.007299972112246591)\n(SNP,0.009934278070299169)\n(SNP,0.027597297818919956)\n(SNP,0.05066263331026538)\n(SNP,0.02453509051903945)\n(SNP,0.024549586670915252)\n(SNP,0.034550720290713544)\n(SNP,0.02584014784455966)\n(SNP,0.019562299429833445)\n(SNP,0.014325290124416088)\n(SNP,0.03247066461881367)\n(SNP,0.007620184847525505)\n(SNP,0.027193854853825125)\n(SNP,0.05321688085639241)\n(SNP,0.08792271465845271)\n(SNP,0.0759542159875609)\n(SNP,0.06259463542383605)\n(SNP,0.06031532047572836)\n(SNP,0.038414521300406436)\n(SNP,0.028674472038172548)\n(SNP,0.04675828817700953)\n(SNP,0.03930127401111047)\n(SNP,0.018226039058646636)\n(SNP,-5.328153273620719E-4)\n(SNP,-0.0019510111698307969)\n(SNP,0.004812468337822189)\n(SNP,0.00618113421447878)\n(SNP,0.013328479704932119)\n(SNP,0.017894075722027482)\n(SNP,-0.002643224739468462)\n(SNP,0.030899870049889384)\n(SNP,0.046167373845831784)\n(SNP,0.044695230746147126)\n(SNP,0.03936377497940874)\n(SNP,0.03645240169950516)\n(SNP,0.03668087672152559)\n(SNP,0.059144615574252477)\n(SNP,0.05256188580439025)\n(SNP,0.05008837854059552)\n(SNP,0.006198522754471264)\n(SNP,-0.012705329413687409)\n(SNP,-0.007995305264748934)\n(SNP,0.006411943617026647)\n(SNP,0.007359216156084242)\n(SNP,0.02731017832240699)\n(SNP,0.005322252349788906)\n(SNP,8.392446777757711E-4)\n(SNP,0.024901086266555322)\n(SNP,0.022362853075539434)\n(SNP,0.03697665770298504)\n(SNP,0.04115586500065378)\n(SNP,0.03219501413854933)\n(SNP,0.03100579393485889)\n(SNP,0.001421150416237757)\n(SNP,-0.0523529946762266)\n(SNP,-0.04503143279036873)\n(SNP,-0.08043994948468641)\n(SNP,-0.08510105250190939)\n(SNP,-0.07843126126432387)\n(SNP,-0.0856460547494876)\n(SNP,-0.08690643103063252)\n(SNP,-0.08568839087089071)\n(SNP,-0.06336082057741911)\n(SNP,-0.005054447687397571)\n(SNP,-0.0021952846256736063)\n(SNP,0.01722757466306628)\n(SNP,0.019758128477839674)\n(SNP,0.014274063202096803)\n(SNP,0.021615870558221627)\n(SNP,0.010635511970955887)\n(SNP,0.009552032080742557)\n(SNP,0.010873351449376687)\n(SNP,0.031194287821594172)\n(SNP,0.009768609071926917)\n(SNP,0.010179054589981923)\n(SNP,0.022295055791076615)\n(SNP,0.022747460734088377)\n(SNP,0.018337273281439123)\n(SNP,0.030856932540045904)\n(SNP,0.028563807142746353)\n(SNP,-0.0034384944868667768)\n(SNP,-0.025237606749787582)\n(SNP,-0.02841203541202656)\n(SNP,-0.032314150732402284)\n(SNP,-0.031068852503621333)\n(SNP,-0.015145036387407152)\n(SNP,-0.027183845083822263)\n(SNP,-0.027251450737608436)\n(SNP,0.0024300097148319193)\n(SNP,0.020525516621061772)\n(SNP,0.03369377399832528)\n(SNP,0.050322826949998775)\n(SNP,0.05107720203288339)\n(SNP,0.0441229290136548)\n(SNP,0.03066792780322992)\n(SNP,0.03960135408387834)\n(SNP,0.025346932147757597)\n(SNP,-0.03237822643272052)\n(SNP,-0.021673126774035652)\n(SNP,-0.0211871867649601)\n(SNP,-0.02750019783927911)\n(SNP,-0.025535862611795933)\n(SNP,-0.025834097519247298)\n(SNP,-0.05899911129681606)\n(SNP,-0.06257498715973285)\n(SNP,-0.06834946241264431)\n(SNP,-0.03712971512846022)\n(SNP,-0.03872400634622975)\n(SNP,-0.043291513125840585)\n(SNP,-0.06138587200793438)\n(SNP,-0.058106993865030585)\n(SNP,-0.048559881378286596)\n(SNP,-0.013499982123765178)\n(SNP,-0.010318620246426847)\n(SNP,0.01629270132090221)\n(SNP,0.024530569386239983)\n(SNP,-0.00525441589952901)\n(SNP,-0.004213575428185691)\n(SNP,0.01852547942394488)\n(SNP,0.027170384454853213)\n(SNP,0.025934454357842775)\n(SNP,0.027645011588675116)\n(SNP,0.02731122951303249)\n(SNP,0.017314080883623226)\n(SNP,6.34981040492641E-4)\n(SNP,0.023816209275296634)\n(SNP,0.007727007848229412)\n(SNP,0.011299073240774721)\n(SNP,9.066039165342757E-5)\n(SNP,-8.096168196052043E-4)\n(SNP,-0.011976048546396414)\n(SNP,-0.0414944535336715)\n(SNP,-0.04817652365442123)\n(SNP,-0.041965014809481005)\n(SNP,-0.031136884222149892)\n(SNP,-0.037243322683706045)\n(SNP,-0.049323395900955865)\n(SNP,-0.06105082372236582)\n(SNP,-0.08030975349994615)\n(SNP,-0.06983265869738536)\n(SNP,-0.04507117817853773)\n(SNP,-0.04966885619051754)\n(SNP,-0.08363296279343349)\n(SNP,-0.11089320087618088)\n(SNP,-0.10789796764376416)\n(SNP,-0.09229889694050615)\n(SNP,-0.1062125319518166)\n(SNP,-0.09818885742056638)\n(SNP,-0.08450841687299912)\n(SNP,-0.06760871290738178)\n(SNP,-0.06122454952712797)\n(SNP,-0.06576504640295558)\n(SNP,-0.07113579606344395)\n(SNP,-0.08608785571635047)\n(SNP,-0.07568421689972366)\n(SNP,-0.04414466270912045)\n(SNP,-0.020516771379540066)\n(SNP,-0.037072458279527896)\n(SNP,-0.03220382126511748)\n(SNP,-0.2659596457662553)\n(SNP,-0.2617967852179719)\n(SNP,-0.2443438318216232)\n(SNP,-0.20246528694793442)\n(SNP,-0.22275360189077337)\n(SNP,-0.22685181436941557)\n(SNP,-0.2289703747742603)\n(SNP,-0.21400986760142382)\n(SNP,-0.22640271057010772)\n(SNP,0.02470382801641408)\n(SNP,0.06317356003711556)\n(SNP,0.08083822990247459)\n(SNP,0.054972235200576494)\n(SNP,0.05465205860805856)\n(SNP,0.059296011986329715)\n(SNP,0.07876962771309488)\n(SNP,0.06666666666666667)\n(SNP,0.05777341942329795)\n(SNP,0.06330181869448752)\n(SNP,0.048296256616287836)\n(SNP,0.025761787774035462)\n(SNP,0.024879116098938957)\n(SNP,0.038343913378275404)\n(SNP,0.02991862718762746)\n(SNP,0.0013324316589300713)\n(SNP,-0.021052605263157886)\n(SNP,-0.03255809966777404)\n(SNP,-0.0379209768740648)\n(SNP,-0.019207522600705983)\n(SNP,0.007156332896471402)\n(SNP,0.018610882842592547)\n(SNP,0.013112162513036145)\n(SNP,0.020749706321942743)\n(SNP,0.01423817660044767)\n(SNP,0.021370913404007694)\n(SNP,0.029120809239527132)\n(SNP,0.015022106257500278)\n(SNP,0.01081896785068328)\n(SNP,-0.003083456392731304)\n(SNP,-3.9717993376385004E-4)\n(SNP,-0.014659270804816807)\n(SNP,-0.033967160655737696)\n(SNP,-0.03699814960642674)\n(SNP,-0.04684824442290409)\n(SNP,-0.03323542533997398)\n(SNP,0.03910382785868768)\n(SNP,0.0214063276359933)\n(SNP,0.027434117436335212)\n(SNP,0.03218543046357625)\n(SNP,0.06286023237018865)\n(SNP,0.08987231388149264)\n(SNP,0.08174386698245593)\n(SNP,0.08601413778820921)\n(SNP,0.07345022780615756)\n(SNP,0.04089905972689215)\n(SNP,0.05385327037874073)\n(SNP,0.03808895188248807)\n(SNP,0.04401387142307186)\n(SNP,0.02017653139306939)\n(SNP,-0.012830082372073816)\n(SNP,-0.005289659816381418)\n(SNP,0.00495803432707686)\n(SNP,0.02147907395498401)\n(SNP,-0.003640484376576277)\n(SNP,-0.01749526812442804)\n(SNP,-0.007186987950749831)\n(SNP,-0.03195672281272461)\n(SNP,-0.012237305012674782)\n(SNP,0.007444744479495259)\n(SNP,0.007090377041388658)\n(SNP,0.012270638370500754)\n(SNP,0.004658814018101549)\n(SNP,0.005921544440410344)\n(SNP,0.026390021173200696)\n(SNP,0.019431026655601435)\n(SNP,0.022473298058067644)\n(SNP,2.5023149792366574E-4)\n(SNP,-0.0036321770356801558)\n(SNP,0.007669109785402151)\n(SNP,0.003874094121747963)\n(SNP,0.012908873130606796)\n(SNP,-0.011523021619389768)\n(SNP,-0.022341499413074208)\n(SNP,-0.028528641903400185)\n(SNP,-0.04495213019933109)\n(SNP,-0.017515338421118517)\n(SNP,0.008799459127613058)\n(SNP,0.010729881204494536)\n(SNP,0.018797385315638435)\n(SNP,0.020539507547636764)\n(SNP,0.04802332863718508)\n(SNP,0.06485384744404843)\n(SNP,0.05745057486083965)\n(SNP,0.05161868149168218)\n(SNP,0.043677576005062634)\n(SNP,0.03127728348909657)\n(SNP,-0.005678298835247483)\n(SNP,-0.005987268132320045)\n(SNP,0.02667309553807861)\n(SNP,0.0843912838156365)\n(SNP,0.08536140341151408)\n(SNP,0.09216588760812375)\n(SNP,0.10756683138848273)\n(SNP,0.09626646042296808)\n(SNP,0.057274019882213145)\n(SNP,0.08739904081691958)\n(SNP,0.05814387358681919)\n(SNP,0.016532853094000783)\n(SNP,-0.03824283558383694)\n(SNP,-0.052137424634236554)\n(SNP,-0.06406836695688123)\n(SNP,-0.06396521402176342)\n(SNP,-0.05920978428958892)\n(SNP,-0.01874284571428575)\n(SNP,-0.01792440999768964)\n(SNP,-0.0015102810987387878)\n(SNP,-0.025673779607951176)\n(SNP,-0.04150245672380106)\n(SNP,-0.03169796134944548)\n(SNP,-0.00652512745847522)\n(SNP,-0.012522302027961832)\n(SNP,-0.018336638096967294)\n(SNP,-0.05870022060679925)\n(SNP,-0.06265984873261506)\n(SNP,-0.06631759393778683)\n(SNP,-0.03171579712474794)\n(SNP,-0.017779402515723398)\n(SNP,-0.021542822074512982)\n(SNP,-0.018987294458736426)\n(SNP,-0.020772958184554782)\n(SNP,-0.018438249514163074)\n(SNP,0.007795063103192317)\n(SNP,0.00558111145657106)\n(SNP,-0.014454878504672907)\n(SNP,-0.03965030217522841)\n(SNP,-0.05134833211856083)\n(SNP,-0.059040625127652256)\n(SNP,-0.0864272529171697)\n(SNP,-0.07091761048550542)\n(SNP,-0.06875382696453626)\n(SNP,-0.06691218171561132)\n(SNP,-0.05340406873694938)\n(SNP,-0.032747453925778415)\n(SNP,-0.006154584078845596)\n(SNP,0.00610073979620011)\n(SNP,0.06549022222222223)\n(SNP,0.103797370934149)\n(SNP,0.07208283360990761)\n(SNP,0.06512858444637011)\n(SNP,0.05026315789473675)\n(SNP,0.03973945276872969)\n(SNP,0.032418339869281)\n(SNP,0.023222757754541058)\n(SNP,0.019610333644424414)\n(SNP,-0.030548459562054684)\n(SNP,-0.07049729939629644)\n(SNP,-0.05621595947954538)\n(SNP,-0.06263148827043594)\n(SNP,-0.057253821097469224)\n(SNP,-0.06365917053912902)\n(SNP,-0.04076982625589412)\n(SNP,-0.016517438318432352)\n(SNP,-0.026445615923644344)\n(SNP,-0.013793938767170501)\n(SNP,0.012077922077922167)\n(SNP,0.01731828893573496)\n(SNP,0.04648087759880326)\n(SNP,0.1281062990033223)\n(SNP,0.13262842434919142)\n(SNP,0.09965675555288386)\n(SNP,0.057820538461538465)\n(SNP,0.11567447060892969)\n(SNP,0.14590020531245984)\n(SNP,0.14962140382394445)\n(SNP,0.11942225793884113)\n(SNP,0.1196214889589905)\n(SNP,0.026976098798163536)\n(SNP,0.03828436860277797)\n(SNP,0.08702436891188019)\n(SNP,0.07647555262451688)\n(SNP,0.03390032776795564)\n(SNP,-0.04535277563204565)\n(SNP,-0.05346571284588511)\n(SNP,-0.028917072733280896)\n(SNP,-0.02716108326965799)\n(SNP,-0.018123445744436882)\n(SNP,-0.02287472324315273)\n(SNP,-0.07840105075974049)\n(SNP,-0.0329880770096824)\n(SNP,0.013521092957746436)\n(SNP,0.0405864985337243)\n(SNP,0.04540092999760857)\n(SNP,0.06335266267229014)\n(SNP,0.03556532669138102)\n(SNP,0.04672897305441526)\n(SNP,0.05008156242625718)\n(SNP,0.07620418255696357)\n(SNP,0.04179769521245417)\n(SNP,0.005781034100534769)\n(SNP,0.017585368251441504)\n(SNP,0.02549353580386834)\n(SNP,0.0484213337639629)\n(SNP,0.06186373265313498)\n(SNP,0.034263393621950834)\n(SNP,0.03704520687465807)\n(SNP,-0.007125361834780521)\n(SNP,0.0011175569585083367)\n(SNP,-0.0017685751987556984)\n(SNP,4.4312619175105895E-4)\n(SNP,-0.00714995018590034)\n(SNP,-0.011386601985882662)\n(SNP,-0.027602139224655303)\n(SNP,-0.008524884180962254)\n(SNP,-0.04598933689839576)\n(SNP,0.014128750840995739)\n(SNP,-8.930787922955533E-4)\n(SNP,-0.022588872164519255)\n(SNP,-0.016277289697204888)\n(SNP,-0.017283458513550707)\n(SNP,-0.06221742600177774)\n(SNP,-0.04539546981379845)\n(SNP,-0.06301699160917477)\n(SNP,-0.021188330309024596)\n(SNP,-0.029190611915289464)\n(SNP,0.010502815642458177)\n(SNP,0.03206073520088593)\n(SNP,0.03219271869395398)\n(SNP,0.023900823807243163)\n(SNP,0.04327359814255294)\n(SNP,0.028146577821512028)\n(SNP,0.0461145566785715)\n(SNP,0.02977901797684164)\n(SNP,0.034624064876170854)\n(SNP,0.011278162068151982)\n(SNP,0.003951712490707156)\n(SNP,-0.015267110641235817)\n(SNP,0.006386280554943928)\n(SNP,0.008141687844005806)\n(SNP,0.009383000745468712)\n(SNP,0.013768654536279368)\n(SNP,0.016460849006301927)\n(SNP,0.005504183421584475)\n(SNP,-2.186420316928867E-4)\n(SNP,0.01137110224547459)\n(SNP,0.022037629389669012)\n(SNP,0.03227566668981034)\n(SNP,0.019862491101030954)\n(SNP,0.03116796738477758)\n(SNP,0.045016438827499235)\n(SNP,0.050880862795501296)\n(SNP,0.04072697791666198)\n(SNP,0.054789970367673316)\n(SNP,0.04097298378378383)\n(SNP,0.04637554397686039)\n(SNP,-0.0051933970364260364)\n(SNP,-0.006420535251595533)\n(SNP,-0.015272064744171594)\n(SNP,8.384236101698437E-4)\n(SNP,4.165035358547062E-4)\n(SNP,0.007994971765095137)\n(SNP,-0.015033665579066801)\n(SNP,-0.011216138631050667)\n(SNP,-0.014704338821580124)\n(SNP,0.013743884362413375)\n(SNP,0.02240174523213245)\n(SNP,0.029617663535113917)\n(SNP,-0.020211540898765198)\n(SNP,-0.03621985769733845)\n(SNP,-0.03036940096013351)\n(SNP,-0.016947378947368388)\n(SNP,-0.012183552275848596)\n(SNP,-0.0081975720820269)\n(SNP,-0.007672138567059556)\n(SNP,-0.008111197724639271)\n(SNP,-0.02353556534593233)\n(SNP,0.02853789073402934)\n(SNP,0.0639308761108181)\n(SNP,0.06274882950171866)\n(SNP,0.05193274496126718)\n(SNP,0.03434339071738254)\n(SNP,0.04439964890114496)\n(SNP,0.05740307259909063)\n(SNP,0.04885299282697566)\n(SNP,0.04070706032580741)\n(SNP,0.013717135600629747)\n(SNP,-0.029029568484457046)\n(SNP,-0.02855985474093278)\n(SNP,-0.020765482914606774)\n(SNP,0.003906301438181522)\n(SNP,-0.0027394176692250886)\n(SNP,-0.023437460874898265)\n(SNP,0.011138102245076878)\n(SNP,0.019042696468498266)\n(SNP,0.012711409142652716)\n(SNP,0.027388614786175453)\n(SNP,0.036905765990528784)\n(SNP,0.023180905088801725)\n(SNP,0.008294050448738417)\n(SNP,0.01749924694781513)\n(SNP,0.05641025641025641)\n(SNP,0.0317444218731783)\n(SNP,0.03222224242424249)\n(SNP,0.015284967959459784)\n(SNP,0.03581607688050546)\n(SNP,0.023527086502383814)\n(SNP,0.026313085441430423)\n(SNP,0.06692390507846138)\n(SNP,0.0538946094611617)\n(SNP,0.020097087378640712)\n(SNP,0.025623595318097624)\n(SNP,0.023974918798807695)\n(SNP,0.016151495030364085)\n(SNP,-0.012671915147193107)\n(SNP,-0.017976443478100953)\n(SNP,-0.06701640468272835)\n(SNP,-0.126403952530058)\n(SNP,-0.12030361251795806)\n(SNP,-0.13048442942800034)\n(SNP,-0.14299233733306224)\n(SNP,-0.15042046206441576)\n(SNP,-0.12745288711642241)\n(SNP,-0.09312506032981673)\n(SNP,-0.08802643705085078)\n(SNP,-0.04381959681697616)\n(SNP,-0.044236195731490555)\n(SNP,-0.05888696010691368)\n(SNP,-0.04925569122968815)\n(SNP,-0.05134710802445019)\n(SNP,-0.03599555599560059)\n(SNP,-0.02338920499269096)\n(SNP,-0.04640706425875881)\n(SNP,-0.05023584622651859)\n(SNP,-0.035397280224236015)\n(SNP,-0.024053807295328227)\n(SNP,-0.013637428062401452)\n(SNP,-0.010361524172674148)\n(SNP,-0.01978820766903939)\n(SNP,-0.030688414143118386)\n(SNP,-0.018652792599949203)\n(SNP,-0.030372745751788936)\n(SNP,-0.02067205315496256)\n(SNP,-0.019095858736914793)\n(SNP,0.0022193902322230658)\n(SNP,-0.004298861391890287)\n(SNP,-0.01349460229751739)\n(SNP,0.01781261154034689)\n(SNP,0.053328518117250596)\n(SNP,0.020767299515406606)\n(SNP,0.02159467277639616)\n(SNP,0.02146226339166513)\n(SNP,0.006332837093919325)\n(SNP,-0.010955733882666727)\n(SNP,-0.01411900866227564)\n(SNP,-0.014740565516253577)\n(SNP,-0.02415120784215612)\n(SNP,-0.051885725714285756)\n(SNP,-0.045287379310344905)\n(SNP,-0.030778177253848522)\n(SNP,-0.04006004248233513)\n(SNP,-0.06292966001467559)\n(SNP,-0.056799433693148244)\n(SNP,-0.050656871834699344)\n(SNP,-0.04296832879826476)\n(SNP,9.565040764765341E-4)\n(SNP,0.012295130331426356)\n(SNP,-0.008427606752410423)\n(SNP,-0.004433732933507511)\n(SNP,-8.418520543151326E-4)\n(SNP,0.023131363107505912)\n(SNP,-0.012743678001703174)\n(SNP,-0.009225757501879534)\n(SNP,-0.01513255396613995)\n(SNP,-0.0038222527015975036)\n(SNP,0.012264812612593068)\n(SNP,0.015541500539807015)\n(SNP,-0.04164659264211376)\n(SNP,-0.04838714375572596)\n(SNP,-0.0481341818937955)\n(SNP,-0.026828588717865972)\n(SNP,-0.018749188137043057)\n(SNP,-0.03987300317460321)\n(SNP,-0.07721825953913052)\n(SNP,-0.06716855506014452)\n(SNP,-0.051889001098625064)\n(SNP,0.017332290228625126)\n(SNP,0.021249684322026)\n(SNP,0.02719964314135232)\n(SNP,0.04603380894580479)\n(SNP,0.05360349883546432)\n(SNP,0.0842481406659418)\n(SNP,0.03872145320584023)\n(SNP,0.02282469018317683)\n(SNP,0.02282469018317683)\n(SNP,0.0022222222222223064)\n(SNP,0.009041404732261654)\n(SNP,-0.005469940192194511)\n(SNP,0.0052212703823651075)\n(SNP,-0.010589130448435676)\n(SNP,-0.01768728893557119)\n(SNP,0.003002226594890502)\n(SNP,8.630131813216217E-4)\n(SNP,-0.016644051083170335)\n(SNP,-0.009854680955900514)\n(SNP,-0.020498318147805013)\n(SNP,-0.0024999624999999526)\n(SNP,-0.015211525906362454)\n(SNP,-0.020420764910557703)\n(SNP,0.009934223394191146)\n(SNP,0.020079832876028894)\n(SNP,0.009485057896033374)\n(SNP,3.761158381114843E-4)\n(SNP,-7.464170470174295E-4)\n(SNP,0.002380889634803599)\n(SNP,-0.007769460860797173)\n(SNP,-0.005525493112852888)\n(SNP,0.004018586111462407)\n(SNP,0.01647603549794593)\n(SNP,-0.013326861311567993)\n(SNP,-0.028431898539300733)\n(SNP,-0.009149053651472077)\n(SNP,-0.009960196713147282)\n(SNP,-0.014251781829023182)\n(SNP,0.006946236423339095)\n(SNP,0.011491299116269657)\n(SNP,0.0018761851860982955)\n(SNP,-0.012459163238397606)\n(SNP,0.03990088128503909)\n(SNP,0.04483796615782607)\n(SNP,0.05084750950790563)\n(SNP,0.04313380444418267)\n(SNP,0.05301206221970994)\n(SNP,0.04414896359655228)\n(SNP,0.049812710357371046)\n(SNP,0.04044941424343107)\n(SNP,0.024375282023215112)\n(SNP,-0.01632501230517192)\n(SNP,-0.02079580428426977)\n(SNP,-0.02985079369641799)\n(SNP,-0.039300724748669844)\n(SNP,-0.03721542860671354)\n(SNP,-0.057057057057057055)\n(SNP,-0.06635740593922729)\n(SNP,-0.049795946714468194)\n(SNP,-0.05859134492136842)\n(SNP,-0.043125437560553495)\n(SNP,-0.04124725069048917)\n(SNP,-0.01836222129931073)\n(SNP,-0.0010039025974677472)\n(SNP,-0.0012510132286462487)\n(SNP,0.0224204076433121)\n(SNP,-0.013119334782337715)\n(SNP,-0.02235135693013368)\n(SNP,-0.016131131101315976)\n(SNP,-0.013546018826332837)\n(SNP,0.003201024409757347)\n(SNP,-0.0012639787185042622)\n(SNP,0.005150056460871125)\n(SNP,0.003882840875893848)\n(SNP,-0.0013705456922365818)\n(SNP,0.04078466543167283)\n(SNP,0.05373293861361229)\n(SNP,0.07926670641965801)\n(SNP,0.0971509265182475)\n(SNP,0.10338224896955323)\n(SNP,0.11364215819952507)\n(SNP,0.06948269443199291)\n(SNP,0.08858387801412655)\n(SNP,0.11977539314347116)\n(SNP,0.08568953479277698)\n(SNP,0.08102475898443855)\n(SNP,0.07619620995684709)\n(SNP,0.06047498094455448)\n(SNP,0.05043379006710662)\n(SNP,0.04295453409090913)\n(SNP,0.09862111244166612)\n(SNP,0.07816618911174777)\n(SNP,0.05158771030640672)\n(SNP,0.07378639381657127)\n(SNP,0.06984914230980505)\n(SNP,0.05479605363125432)\n(SNP,0.03430391421557849)\n(SNP,0.029071677768344444)\n(SNP,-0.011004598071525366)\n(SNP,-0.02478190889540229)\n(SNP,-0.025725502285531974)\n(SNP,-0.05605002297255851)\n(SNP,-0.05286672581923779)\n(SNP,-0.05468994286571148)\n(SNP,-0.05395155839933488)\n(SNP,-0.05769431772510355)\n(SNP,-0.045371836662552276)\n(SNP,-0.023025196310186027)\n(SNP,-0.036645216781650995)\n(SNP,-0.006110267187992002)\n(SNP,0.02244920967332853)\n(SNP,0.04256515001611455)\n(SNP,0.026796725489477913)\n(SNP,-0.01303183351561417)\n(SNP,-0.002716138493479645)\n(SNP,-0.014348156197154419)\n(SNP,-0.014208412268831754)\n(SNP,-0.011208037785394752)\n(SNP,-0.0452299394106901)\n(SNP,-0.07541986279151887)\n(SNP,-0.07809975055262845)\n(SNP,-0.09106796044839564)\n(SNP,-0.0674867840256541)\n(SNP,-0.06218796883154888)\n(SNP,-0.054361401114522985)\n(SNP,-0.05925417660155982)\n(SNP,-0.07316234591996092)\n(SNP,-0.050017223755119876)\n(SNP,-0.0066492162592113446)\n(SNP,-0.021032986187590762)\n(SNP,0.019461833720851328)\n(SNP,0.058332326939331644)\n(SNP,0.06909485804809842)\n(SNP,0.05207457481480272)\n(SNP,0.04474708280026961)\n(SNP,0.04138364575850457)\n(SNP,0.0364317827487855)\n(SNP,0.0203203074195406)\n(SNP,0.010264979831284068)\n(SNP,-0.0025925288405310508)\n(SNP,-0.04333897232723742)\n(SNP,-0.09009619898350192)\n(SNP,-0.08550528970603713)\n(SNP,-0.07413867723786495)\n(SNP,-0.046144707729132615)\n(SNP,-0.06574795278808666)\n(SNP,-0.07802253891726174)\n(SNP,-0.05883737073295573)\n(SNP,-0.05824669255962546)\n(SNP,-0.045900117336834065)\n(SNP,-0.019902948375456496)\n(SNP,-0.016125012500000046)\n(SNP,-0.01998747881882553)\n(SNP,-0.026613691002925422)\n(SNP,-0.034125037499999955)\n(SNP,-0.05984751181121387)\n(SNP,-0.061009298970158186)\n(SNP,-0.05055826183111594)\n(SNP,-0.047231232773740785)\n(SNP,-0.035410597342167865)\n(SNP,-0.05310634040282471)\n(SNP,-0.045921011363789184)\n(SNP,-0.03666788181938991)\n(SNP,-0.037142424115792355)\n"
      },
      "dateCreated": "Sep 22, 2015 1:41:54 PM",
      "dateStarted": "Sep 22, 2015 5:26:01 PM",
      "dateFinished": "Sep 22, 2015 5:26:02 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": " def factorMatrix(histories: Seq[Array[Double]]): Array[Array[Double]] \u003d {\r\n    val mat \u003d new Array[Array[Double]](histories.head.length)\r\n    for (i \u003c- 0 until histories.head.length) {\r\n      mat(i) \u003d histories.map(_(i)).toArray\r\n    }\r\n    mat\r\n  }",
      "dateUpdated": "Sep 22, 2015 2:37:08 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440099839789_-1659859311",
      "id": "20150820-194359_865193611",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factorMatrix: (histories: Seq[Array[Double]])Array[Array[Double]]\n"
      },
      "dateCreated": "Sep 20, 2015 7:43:59 PM",
      "dateStarted": "Sep 22, 2015 2:37:36 PM",
      "dateFinished": "Sep 22, 2015 2:37:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val factorMat \u003d factorMatrix(Seq(factor1,factor2))",
      "dateUpdated": "Sep 22, 2015 5:26:13 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440086683920_2055024222",
      "id": "20150820-160443_6603969",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factorMat: Array[Array[Double]] \u003d Array(Array(0.06696219139867492, 0.0), Array(0.04827991058997068, 0.0), Array(0.04130566945957371, 0.0), Array(0.0672766428962698, 0.0), Array(0.04451226311273146, 0.0), Array(0.06770724327050374, 0.0), Array(0.12031015570825188, 0.0), Array(0.1229614550291878, 0.0), Array(0.052934109335769676, 0.0), Array(0.04529220206675212, 0.0), Array(0.09756424431266131, 0.0), Array(0.10211838649922028, 0.0), Array(0.037464787412056555, 0.0), Array(-0.019034534614679573, 0.0), Array(-0.024620594861912117, 0.0), Array(-0.020153639426766925, 0.0), Array(-0.003753494361906064, 0.0), Array(-0.029534279395922933, 0.0), Array(8.210217559517635E-4, 0.0), Array(0.002300349304226141, 0.0), Array(0.01601426590744601, 0.0), Array(0.05981973434535093, 0.0), Array(0.11302132250..."
      },
      "dateCreated": "Sep 20, 2015 4:04:43 PM",
      "dateStarted": "Sep 22, 2015 5:26:13 PM",
      "dateFinished": "Sep 22, 2015 5:26:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val factorMatrdd \u003d sc.parallelize(factorMat)",
      "dateUpdated": "Sep 22, 2015 5:26:16 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440091063599_-806423759",
      "id": "20150820-171743_1002782030",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factorMatrdd: org.apache.spark.rdd.RDD[Array[Double]] \u003d ParallelCollectionRDD[5577] at parallelize at \u003cconsole\u003e:222\n"
      },
      "dateCreated": "Sep 20, 2015 5:17:43 PM",
      "dateStarted": "Sep 22, 2015 5:26:16 PM",
      "dateFinished": "Sep 22, 2015 5:26:17 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def featurize(factorReturns: Array[Double]): Array[Double] \u003d {\r\n    val squaredReturns \u003d factorReturns.map(x \u003d\u003e math.signum(x) * x * x)\r\n    val squareRootedReturns \u003d factorReturns.map(x \u003d\u003e math.signum(x) * math.sqrt(math.abs(x)))\r\n    squaredReturns ++ squareRootedReturns ++ factorReturns\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:26:26 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440099930827_1371682898",
      "id": "20150820-194530_873521251",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "featurize: (factorReturns: Array[Double])Array[Double]\n"
      },
      "dateCreated": "Sep 20, 2015 7:45:30 PM",
      "dateStarted": "Sep 22, 2015 5:26:26 PM",
      "dateFinished": "Sep 22, 2015 5:26:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val factorFeatures \u003d factorMatrdd.map(featurize)",
      "dateUpdated": "Sep 22, 2015 5:26:29 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440109876614_1645913327",
      "id": "20150820-223116_928044311",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factorFeatures: org.apache.spark.rdd.RDD[Array[Double]] \u003d MapPartitionsRDD[5578] at map at \u003cconsole\u003e:226\n"
      },
      "dateCreated": "Sep 20, 2015 10:31:16 PM",
      "dateStarted": "Sep 22, 2015 5:26:29 PM",
      "dateFinished": "Sep 22, 2015 5:26:30 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "factorFeatures.collect",
      "dateUpdated": "Sep 22, 2015 5:26:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440109899803_-79069234",
      "id": "20150820-223139_457356523",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res405: Array[Array[Double]] \u003d Array(Array(0.004483935076912773, 0.0, 0.2587705381195373, 0.0, 0.06696219139867492, 0.0), Array(0.0023309497665755627, 0.0, 0.21972690001447406, 0.0, 0.04827991058997068, 0.0), Array(0.0017061583295035602, 0.0, 0.20323796264372881, 0.0, 0.04130566945957371, 0.0), Array(0.004526146679392211, 0.0, 0.25937741400567205, 0.0, 0.0672766428962698, 0.0), Array(0.0019813415674170337, 0.0, 0.21097929545984237, 0.0, 0.04451226311273146, 0.0), Array(0.004584270791291175, 0.0, 0.2602061553278549, 0.0, 0.06770724327050374, 0.0), Array(0.014474533566543811, 0.0, 0.34685754382491363, 0.0, 0.12031015570825188, 0.0), Array(0.015119519422894974, 0.0, 0.3506586018183324, 0.0, 0.1229614550291878, 0.0), Array(0.0028020199311712185, 0.0, 0.23007413878089314, 0.0, 0.052934109335..."
      },
      "dateCreated": "Sep 20, 2015 10:31:39 PM",
      "dateStarted": "Sep 22, 2015 5:26:33 PM",
      "dateFinished": "Sep 22, 2015 5:26:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "factorFeatures.count",
      "dateUpdated": "Sep 22, 2015 5:26:39 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440111821606_-538300722",
      "id": "20150820-230341_1591366852",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res407: Long \u003d 4031\n"
      },
      "dateCreated": "Sep 20, 2015 11:03:41 PM",
      "dateStarted": "Sep 22, 2015 5:26:39 PM",
      "dateFinished": "Sep 22, 2015 5:26:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "var test \u003d 0",
      "dateUpdated": "Sep 22, 2015 2:37:09 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440201457808_1172120976",
      "id": "20150821-235737_831989940",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "test: Int \u003d 0\n"
      },
      "dateCreated": "Sep 21, 2015 11:57:37 PM",
      "dateStarted": "Sep 22, 2015 2:37:40 PM",
      "dateFinished": "Sep 22, 2015 2:37:41 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": " def dataMatrix(histories: Array[(String, Double)]): Array[Double] \u003d {\r\n    val mat \u003d new Array[Double](histories.length)\r\n    //test \u003d test + 1\r\n   //val fileID \u003d test\r\n    var i \u003d 0\r\n    for(y \u003c- histories){\r\n        if (i \u003c histories.length){\r\n            mat(i) \u003d y._2.toDouble\r\n            i\u003d (i + 1)\r\n        }\r\n     }\r\n    mat:+stockNameMap.get(histories(0)._1).get\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:28:33 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440111522256_-1251870370",
      "id": "20150820-225842_110046558",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "dataMatrix: (histories: Array[(String, Double)])Array[Double]\n"
      },
      "dateCreated": "Sep 20, 2015 10:58:42 PM",
      "dateStarted": "Sep 22, 2015 5:28:33 PM",
      "dateFinished": "Sep 22, 2015 5:28:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": " def dataModel(instrument: Array[Double], factorMatrix: Array[Array[Double]])\u003d {\r\n     val mat \u003d new Array[Array[Double]](instrument.length-1)\r\n   for (i \u003c- 0 until instrument.length-1 ) {\r\n        if (i \u003c instrument.length-1){\r\n            mat(i) \u003d factorMatrix(i):+instrument(i):+instrument(instrument.length-1)\r\n        }\r\n       \r\n    }\r\n    mat\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:28:36 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440121398284_-1769659861",
      "id": "20150821-014318_881963151",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "dataModel: (instrument: Array[Double], factorMatrix: Array[Array[Double]])Array[Array[Double]]\n"
      },
      "dateCreated": "Sep 21, 2015 1:43:18 AM",
      "dateStarted": "Sep 22, 2015 5:28:36 PM",
      "dateFinished": "Sep 22, 2015 5:28:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val temp \u003d stocksReturns.toArray",
      "dateUpdated": "Sep 22, 2015 5:28:39 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440170792057_269326851",
      "id": "20150821-152632_343573542",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "warning: there were 1 deprecation warning(s); re-run with -deprecation for details\ntemp: Array[Array[(String, Double)]] \u003d Array(Array((MSFT,-0.06899220198734253), (MSFT,-0.06467054775253576), (MSFT,-0.09523809523809523), (MSFT,-0.07556675062972293), (MSFT,-0.0901015228426396), (MSFT,-0.081875), (MSFT,-0.0525), (MSFT,0.009198423127463863), (MSFT,0.02807486631016043), (MSFT,-0.004641909814323607), (MSFT,0.006600660066006601), (MSFT,0.10318559556786704), (MSFT,0.06403269754768393), (MSFT,0.100418410041841), (MSFT,0.029952348536419333), (MSFT,0.012532981530343008), (MSFT,-0.0078125), (MSFT,0.027308192457737322), (MSFT,0.0313124583610926), (MSFT,0.07868852459016394), (MSFT,0.07281858129315756), (MSFT,0.15364916773367476), (MSFT,0.0926805272496832), (MSFT,0.09583608724388631), (MSFT,0.09641693811074918), (MSFT,0.11482939632545931), (MSFT,0.07341772151898734), (MSFT,-0.02390..."
      },
      "dateCreated": "Sep 21, 2015 3:26:32 PM",
      "dateStarted": "Sep 22, 2015 5:28:39 PM",
      "dateFinished": "Sep 22, 2015 5:28:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val labels \u003d temp.map(dataMatrix)",
      "dateUpdated": "Sep 22, 2015 5:28:41 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440133832296_2000548364",
      "id": "20150821-051032_1178671656",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "labels: Array[Array[Double]] \u003d Array(Array(-0.06899220198734253, -0.06467054775253576, -0.09523809523809523, -0.07556675062972293, -0.0901015228426396, -0.081875, -0.0525, 0.009198423127463863, 0.02807486631016043, -0.004641909814323607, 0.006600660066006601, 0.10318559556786704, 0.06403269754768393, 0.100418410041841, 0.029952348536419333, 0.012532981530343008, -0.0078125, 0.027308192457737322, 0.0313124583610926, 0.07868852459016394, 0.07281858129315756, 0.15364916773367476, 0.0926805272496832, 0.09583608724388631, 0.09641693811074918, 0.11482939632545931, 0.07341772151898734, -0.023901808785529714, -0.1094224924012158, -0.173785839672323, -0.21975582685904552, -0.19269241505850612, -0.14475271411338964, -0.19073083778966132, -0.22660388463802236, -0.23702830188679244, -0.162144275314..."
      },
      "dateCreated": "Sep 21, 2015 5:10:32 AM",
      "dateStarted": "Sep 22, 2015 5:28:41 PM",
      "dateFinished": "Sep 22, 2015 5:28:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val tblah \u003d labels.length\n\nvar rnd \u003d new scala.util.Random",
      "dateUpdated": "Sep 22, 2015 5:28:44 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440137898801_62357952",
      "id": "20150821-061818_1193990324",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "tblah: Int \u003d 4\nrnd: scala.util.Random \u003d scala.util.Random@5926f577\n"
      },
      "dateCreated": "Sep 21, 2015 6:18:18 AM",
      "dateStarted": "Sep 22, 2015 5:28:44 PM",
      "dateFinished": "Sep 22, 2015 5:28:45 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val temp \u003d labels.map(x \u003d\u003e dataModel(x,factorFeatures.toArray))",
      "dateUpdated": "Sep 22, 2015 5:28:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440133852575_-54364863",
      "id": "20150821-051052_1095240223",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "warning: there were 1 deprecation warning(s); re-run with -deprecation for details\ntemp: Array[Array[Array[Double]]] \u003d Array(Array(Array(0.004483935076912773, 0.0, 0.2587705381195373, 0.0, 0.06696219139867492, 0.0, -0.06899220198734253, 1692.0), Array(0.0023309497665755627, 0.0, 0.21972690001447406, 0.0, 0.04827991058997068, 0.0, -0.06467054775253576, 1692.0), Array(0.0017061583295035602, 0.0, 0.20323796264372881, 0.0, 0.04130566945957371, 0.0, -0.09523809523809523, 1692.0), Array(0.004526146679392211, 0.0, 0.25937741400567205, 0.0, 0.0672766428962698, 0.0, -0.07556675062972293, 1692.0), Array(0.0019813415674170337, 0.0, 0.21097929545984237, 0.0, 0.04451226311273146, 0.0, -0.0901015228426396, 1692.0), Array(0.004584270791291175, 0.0, 0.2602061553278549, 0.0, 0.06770724327050374, 0.0, -0.081875, 1692.0), Array(0.014474533566543811, 0.0, 0.34685754382491363, 0.0, 0.1203..."
      },
      "dateCreated": "Sep 21, 2015 5:10:52 AM",
      "dateStarted": "Sep 22, 2015 5:28:48 PM",
      "dateFinished": "Sep 22, 2015 5:28:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val t \u003d temp.length",
      "dateUpdated": "Sep 22, 2015 5:28:52 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440134506651_-1155601582",
      "id": "20150821-052146_1325958521",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "t: Int \u003d 4\n"
      },
      "dateCreated": "Sep 21, 2015 5:21:46 AM",
      "dateStarted": "Sep 22, 2015 5:28:52 PM",
      "dateFinished": "Sep 22, 2015 5:28:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def computefactorWeights(dataset:Array[Array[Double]])\u003d {\r\n    \r\n   \r\n    val stockID \u003d dataset(0)(dataset(0).length-1)\r\n    \r\n     val data2 \u003d dataset.map{ line \u003d\u003e\r\n    LabeledPoint(line(line.length-2), Vectors.dense(line.dropRight(2)))\r\n    }\r\n    \r\n    val data2RDD \u003d sc.parallelize(data2)\r\n  \r\n            // ALGORITHMS \r\n             \r\n            \r\n            if (algoNAme \u003d\u003d \"LinearRegressionWithSGD_L0\"){\r\n                \r\n            \t// LR default L0\r\n                var lrAlg \u003d new LinearRegressionWithSGD()\r\n                  lrAlg.optimizer.setNumIterations(100).setStepSize(0.001)\t\r\n                  lrAlg.setIntercept(true)\r\n                  \r\n                  \r\n                   val model \u003d lrAlg.run(data2RDD)\r\n            \r\n                     var factorWeights \u003d new Array[Double](model.weights.toArray.length)\r\n            \r\n                     var i \u003d 0\r\n             for (wts \u003c- model.weights.toArray){\r\n                  \r\n                if (i \u003c model.weights.toArray.length){\r\n                    factorWeights(i) \u003d wts\r\n                    i \u003d i + 1\r\n              //     println(wts)\r\n               //    println(\"#######################\")\r\n                }\r\n                \r\n                \r\n            }\r\n        \r\n            println(model.intercept)\r\n        \r\n            factorWeights \u003d factorWeights:+model.intercept\r\n  \r\n            factorWeights:+stockID\r\n            \r\n            }\r\n            if (algoNAme \u003d\u003d \"LinearRegressionWithSGD_L1\"){\r\n                \r\n            \t// LR default L1\r\n           var  lrAlg \u003d new LinearRegressionWithSGD()\r\n                lrAlg.optimizer.setNumIterations(100).setUpdater(new L1Updater).setStepSize(0.001)\t\r\n                lrAlg.setIntercept(true)\r\n                \r\n                 val model \u003d lrAlg.run(data2RDD)\r\n            \r\n            var factorWeights \u003d new Array[Double](model.weights.toArray.length)\r\n            \r\n            var i \u003d 0\r\n            for (wts \u003c- model.weights.toArray){\r\n                \r\n                if (i \u003c model.weights.toArray.length){\r\n                    factorWeights(i) \u003d wts\r\n                    i \u003d i + 1\r\n                    //println(wts)\r\n                    //println(\"#######################\")\r\n                }\r\n                \r\n                \r\n            }\r\n        \r\n            factorWeights \u003d factorWeights:+model.intercept\r\n            \r\n       \r\n            \r\n            factorWeights:+stockID\r\n            }  \r\n            \r\n            if (algoNAme \u003d\u003d \"LinearRegressionWithSGD_L2\"){\r\n                \t// LR default L2\r\n\t        var lrAlg \u003d new LinearRegressionWithSGD()\r\n\t            lrAlg.optimizer.setNumIterations(100).setUpdater(new SquaredL2Updater).setStepSize(0.001)\t\r\n            \tlrAlg.setIntercept(true)\r\n            \t\r\n            \t val model \u003d lrAlg.run(data2RDD)\r\n            \r\n            var factorWeights \u003d new Array[Double](model.weights.toArray.length)\r\n            \r\n            var i \u003d 0\r\n            for (wts \u003c- model.weights.toArray){\r\n                \r\n                if (i \u003c model.weights.toArray.length){\r\n                    factorWeights(i) \u003d wts\r\n                    i \u003d i + 1\r\n                    //println(wts)\r\n                    //println(\"#######################\")\r\n                }\r\n                \r\n                \r\n            }\r\n        \r\n            factorWeights \u003d factorWeights:+model.intercept\r\n            \r\n       \r\n            \r\n            factorWeights:+stockID\r\n            }  \r\n            \r\n            \r\n            if (algoNAme \u003d\u003d \"RidgeRegressionWithSGD\"){\r\n               // RidgeRegressionWithSGD default L2\r\n            var lrAlg \u003d new RidgeRegressionWithSGD()\r\n                lrAlg.optimizer.setNumIterations(100).setStepSize(0.001)\t\r\n                lrAlg.setIntercept(true) \r\n                 val model \u003d lrAlg.run(data2RDD)\r\n            \r\n            var factorWeights \u003d new Array[Double](model.weights.toArray.length)\r\n            \r\n            var i \u003d 0\r\n            for (wts \u003c- model.weights.toArray){\r\n                \r\n                if (i \u003c model.weights.toArray.length){\r\n                    factorWeights(i) \u003d wts\r\n                    i \u003d i + 1\r\n                    //println(wts)\r\n                    //println(\"#######################\")\r\n                }\r\n                \r\n                \r\n            }\r\n        \r\n            factorWeights \u003d factorWeights:+model.intercept\r\n            \r\n       \r\n            \r\n            factorWeights:+stockID\r\n            }\r\n            \r\n            \r\n            if (algoNAme \u003d\u003d \"LassoWithSGD\"){\r\n                // LR default L2\r\n           var  lrAlg \u003d new LassoWithSGD()\r\n\t            lrAlg.optimizer.setNumIterations(100).setStepSize(0.001)\t\r\n            \tlrAlg.setIntercept(true)   \r\n            \t\r\n            \t val model \u003d lrAlg.run(data2RDD)\r\n            \r\n            var factorWeights \u003d new Array[Double](model.weights.toArray.length)\r\n            \r\n            var i \u003d 0\r\n            for (wts \u003c- model.weights.toArray){\r\n                \r\n                if (i \u003c model.weights.toArray.length){\r\n                    factorWeights(i) \u003d wts\r\n                    i \u003d i + 1\r\n                    //println(wts)\r\n                    //println(\"#######################\")\r\n                }\r\n                \r\n                \r\n            }\r\n        \r\n            factorWeights \u003d factorWeights:+model.intercept\r\n            \r\n       \r\n            \r\n            factorWeights:+stockID\r\n            }else{\r\n                \r\n            }\r\n            \t\r\n     \r\n           \r\n        \r\n  }",
      "dateUpdated": "Sep 22, 2015 5:20:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440264027251_-223130198",
      "id": "20150822-172027_1895586158",
      "dateCreated": "Sep 22, 2015 5:20:27 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def LinearRegressionWithSGD_L0(dataset:Array[Array[Double]])\u003d {\r\n    \r\n   \r\n    val stockID \u003d dataset(0)(dataset(0).length-1)\r\n    \r\n     val data2 \u003d dataset.map{ line \u003d\u003e\r\n    LabeledPoint(line(line.length-2), Vectors.dense(line.dropRight(2)))\r\n    }\r\n    \r\n    val data2RDD \u003d sc.parallelize(data2)\r\n  \r\n            \r\n                \r\n            \t// LR default L0\r\n                var lrAlg \u003d new LinearRegressionWithSGD()\r\n                  lrAlg.optimizer.setNumIterations(100).setStepSize(0.001)\t\r\n                  lrAlg.setIntercept(true)\r\n                  \r\n                  \r\n                   val model \u003d lrAlg.run(data2RDD)\r\n            \r\n                     var factorWeights \u003d new Array[Double](model.weights.toArray.length)\r\n            \r\n                     var i \u003d 0\r\n             for (wts \u003c- model.weights.toArray){\r\n                  \r\n                if (i \u003c model.weights.toArray.length){\r\n                    factorWeights(i) \u003d wts\r\n                    i \u003d i + 1\r\n              //     println(wts)\r\n               //    println(\"#######################\")\r\n                }\r\n                \r\n                \r\n            }\r\n        \r\n           // println(model.intercept)\r\n        \r\n            factorWeights \u003d factorWeights:+model.intercept\r\n  \r\n            factorWeights:+stockID\r\n          \r\n           \r\n        \r\n  }",
      "dateUpdated": "Sep 22, 2015 5:29:08 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440167752389_1100452350",
      "id": "20150821-143552_526227336",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "LinearRegressionWithSGD_L0: (dataset: Array[Array[Double]])Array[Double]\n"
      },
      "dateCreated": "Sep 21, 2015 2:35:52 PM",
      "dateStarted": "Sep 22, 2015 5:29:08 PM",
      "dateFinished": "Sep 22, 2015 5:29:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\nval factorWts \u003d  temp.map(LinearRegressionWithSGD_L0)\n",
      "dateUpdated": "Sep 22, 2015 5:29:13 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440168144376_883785645",
      "id": "20150821-144224_1307961280",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factorWts: Array[Array[Double]] \u003d Array(Array(-5.830543715487379E-5, -8.145575516972734E-6, -2.2090561922299555E-4, -2.7058463329653943E-4, -5.1182601273588345E-5, -7.707078849558579E-5, 0.981582011623249, 1692.0), Array(-5.715107831971275E-5, -7.877263140413492E-6, -2.54014538440771E-4, -2.6415522128680525E-4, -6.0264868323428417E-5, -7.485603459439772E-5, 0.981734252635966, 447.0), Array(-5.9893175107227496E-5, -7.575670550268179E-6, -2.4843490081899894E-4, -2.5428909059251357E-4, -6.097536258951667E-5, -7.211620920026178E-5, 0.9817523790452007, 98.0), Array(-5.5980748162529755E-5, -8.29021121437707E-6, -1.6142624582283634E-4, -2.567989059506871E-4, -3.361592816001146E-5, -7.464889901341296E-5, 0.9816086959695997, 51.0))\n"
      },
      "dateCreated": "Sep 21, 2015 2:42:24 PM",
      "dateStarted": "Sep 22, 2015 5:29:13 PM",
      "dateFinished": "Sep 22, 2015 5:29:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Sep 22, 2015 2:37:11 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440252685035_972271396",
      "id": "20150822-141125_1087771407",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Sep 22, 2015 2:11:25 PM",
      "dateStarted": "Sep 22, 2015 2:37:50 PM",
      "dateFinished": "Sep 22, 2015 2:38:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": " // Covariance Calcultaion\n\nval factorCov \u003d new Covariance(factorMat).getCovarianceMatrix().getData()",
      "dateUpdated": "Sep 22, 2015 5:29:31 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440170396491_-1326025979",
      "id": "20150821-151956_604912837",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factorCov: Array[Array[Double]] \u003d Array(Array(0.006027987427584766, 9.896260268633945E-4), Array(9.896260268633945E-4, 0.004243186039568683))\n"
      },
      "dateCreated": "Sep 21, 2015 3:19:56 PM",
      "dateStarted": "Sep 22, 2015 5:29:31 PM",
      "dateFinished": "Sep 22, 2015 5:29:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val factorMeans \u003d Seq(factor1,factor2).map(factor \u003d\u003e factor.sum /factor.size).toArray",
      "dateUpdated": "Sep 22, 2015 5:29:34 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440171312551_-416926745",
      "id": "20150821-153512_190090102",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "factorMeans: Array[Double] \u003d Array(0.004282390070428044, 0.0050116151824610026)\n"
      },
      "dateCreated": "Sep 21, 2015 3:35:12 PM",
      "dateStarted": "Sep 22, 2015 5:29:34 PM",
      "dateFinished": "Sep 22, 2015 5:29:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//factorFeatures\n\n\nval broadCastFactorWts \u003d sc.broadcast(factorWts)\n\nval numTrials \u003d nTrials.getOrElse(0)\nval parallelism \u003d numTrials / 10\nval baseSeed \u003d 1001L\n    \n    \n// Generate different seeds so that our simulations don\u0027t all end up with the same results\nval seeds \u003d (baseSeed until baseSeed + parallelism)\nval seedRdd \u003d sc.parallelize(seeds, parallelism)\n\n\n",
      "dateUpdated": "Sep 22, 2015 5:29:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440171482959_997223032",
      "id": "20150821-153802_633054003",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "broadCastFactorWts: org.apache.spark.broadcast.Broadcast[Array[Array[Double]]] \u003d Broadcast(6372)\nnumTrials: Int \u003d 100\nparallelism: Int \u003d 10\nbaseSeed: Long \u003d 1001\nseeds: scala.collection.immutable.NumericRange.Exclusive[Long] \u003d NumericRange(1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010)\nseedRdd: org.apache.spark.rdd.RDD[Long] \u003d ParallelCollectionRDD[6391] at parallelize at \u003cconsole\u003e:192\n"
      },
      "dateCreated": "Sep 21, 2015 3:38:02 PM",
      "dateStarted": "Sep 22, 2015 5:29:37 PM",
      "dateFinished": "Sep 22, 2015 5:29:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// create an empty map\r\nvar stocksTrialsReturns \u003d scala.collection.mutable.Map[String, Double]()",
      "dateUpdated": "Sep 22, 2015 5:29:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440189866531_9634279",
      "id": "20150821-204426_440649632",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "stocksTrialsReturns: scala.collection.mutable.Map[String,Double] \u003d Map()\n"
      },
      "dateCreated": "Sep 21, 2015 8:44:26 PM",
      "dateStarted": "Sep 22, 2015 5:29:48 PM",
      "dateFinished": "Sep 22, 2015 5:29:48 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/**\r\n   * Calculate the return of a particular instrument under particular trial conditions.\r\n   */\r\n  def instrumentTrialReturn(instrument: Array[Double], trial: Array[Double]): Double \u003d {\r\n    var instrumentTrialReturn \u003d instrument(0)\r\n    var i \u003d 0\r\n    while (i \u003c trial.length) {\r\n      instrumentTrialReturn +\u003d trial(i) * instrument(i+1)\r\n      i +\u003d 1\r\n    }\r\n    instrumentTrialReturn\r\n  }\r\n   \r\n  /**\r\n   * Calculate the full return of the portfolio under particular trial conditions.\r\n   */\r\n  def trialReturn(trial: Array[Double], instruments: Seq[Array[Double]]) \u003d {\r\n    var totalReturn \u003d 0.0\r\n   // var totalR \u003d new Array[(Double,Array[(Double,Double)])] (1)\r\n    val individualTrialReturns \u003d new Array[(Double,Double)](instruments.length)\r\n    var i \u003d 0\r\n    for (instrument \u003c- instruments) {\r\n     val instrumentReturn \u003d instrumentTrialReturn(instrument.dropRight(1), trial)\r\n      totalReturn \u003d totalReturn + instrumentReturn \r\n     if (i \u003c instruments.length ){\r\n         individualTrialReturns(i) \u003d (instrument(instrument.length-1),instrumentReturn)\r\n         i\u003d i+1\r\n     }\r\n     \r\n    }\r\n    ((totalReturn / instruments.size),individualTrialReturns)\r\n    \r\n  }",
      "dateUpdated": "Sep 22, 2015 5:29:51 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440178535674_588218801",
      "id": "20150821-173535_1783534099",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "instrumentTrialReturn: (instrument: Array[Double], trial: Array[Double])Double\ntrialReturn: (trial: Array[Double], instruments: Seq[Array[Double]])(Double, Array[(Double, Double)])\n"
      },
      "dateCreated": "Sep 21, 2015 5:35:35 PM",
      "dateStarted": "Sep 22, 2015 5:29:51 PM",
      "dateFinished": "Sep 22, 2015 5:29:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "  def trialReturns(\r\n      seed: Long,\r\n      numTrials: Int,\r\n      instruments: Seq[Array[Double]],\r\n      factorMeans: Array[Double],\r\n      factorCovariances: Array[Array[Double]]): Array[(Double, Array[(Double, Double)])] \u003d {\r\n    val rand \u003d new MersenneTwister(seed)\r\n    val multivariateNormal \u003d new MultivariateNormalDistribution(rand, factorMeans,\r\n      factorCovariances)\r\n    \r\n    val trialReturns \u003d new Array[(Double,Array[(Double,Double)])](numTrials)\r\n    \r\n    for (i \u003c- 0 until numTrials) {\r\n       \r\n      val trialFactorReturns \u003d multivariateNormal.sample()\r\n      val trialFeatures \u003d featurize(trialFactorReturns)\r\n      trialReturns(i) \u003d trialReturn(trialFeatures, instruments)\r\n    }\r\n    \r\n    trialReturns\r\n\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:30:03 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440179579485_35039062",
      "id": "20150821-175259_102226368",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "trialReturns: (seed: Long, numTrials: Int, instruments: Seq[Array[Double]], factorMeans: Array[Double], factorCovariances: Array[Array[Double]])Array[(Double, Array[(Double, Double)])]\n"
      },
      "dateCreated": "Sep 21, 2015 5:52:59 PM",
      "dateStarted": "Sep 22, 2015 5:30:03 PM",
      "dateFinished": "Sep 22, 2015 5:30:04 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val trialsrdd \u003d seedRdd.flatMap(\r\n      trialReturns(_, numTrials / parallelism, broadCastFactorWts.value, factorMeans, factorCov))",
      "dateUpdated": "Sep 22, 2015 5:30:07 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440191220599_-1176987692",
      "id": "20150821-210700_1704403609",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "trialsrdd: org.apache.spark.rdd.RDD[(Double, Array[(Double, Double)])] \u003d MapPartitionsRDD[6392] at flatMap at \u003cconsole\u003e:283\n"
      },
      "dateCreated": "Sep 21, 2015 9:07:00 PM",
      "dateStarted": "Sep 22, 2015 5:30:07 PM",
      "dateFinished": "Sep 22, 2015 5:30:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val trials \u003d trialsrdd.map(line \u003d\u003e line._1)",
      "dateUpdated": "Sep 22, 2015 5:30:11 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440193628048_-1206381327",
      "id": "20150821-214708_918300162",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "trials: org.apache.spark.rdd.RDD[Double] \u003d MapPartitionsRDD[6393] at map at \u003cconsole\u003e:285\n"
      },
      "dateCreated": "Sep 21, 2015 9:47:08 PM",
      "dateStarted": "Sep 22, 2015 5:30:11 PM",
      "dateFinished": "Sep 22, 2015 5:30:12 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "trials.collect",
      "dateUpdated": "Sep 22, 2015 5:30:14 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440239013168_1200205633",
      "id": "20150822-102333_52761462",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res444: Array[Double] \u003d Array(0.11854713649904873, -0.020452816248974888, 0.04255981362827712, -0.1006145293729809, 0.08722654066800187, 0.09780080342153533, 0.09471786796266585, 0.008858473815892063, 0.08387229013112779, 0.026133980624449847, 0.022733299219515772, -0.07590761580271502, 0.0643051789080584, 0.005938454006983167, 0.08225396771368829, 0.07265335854650741, -0.10738955123303409, 0.038726201687350505, 0.020007750887524704, 0.06747980465012603, 0.1010133953247236, 0.010436768645770964, -0.010421707353439648, -0.039008931520423125, 0.08413096363156188, 0.017149350306169237, 0.0266684686497437, -0.009145003228455817, 0.031246891624290358, -0.015458157418010123, -0.1214892504733129, 0.05061510447338753, 0.012116679492679909, 0.05557002181320897, -0.06050926572738206, -0.098891011..."
      },
      "dateCreated": "Sep 22, 2015 10:23:33 AM",
      "dateStarted": "Sep 22, 2015 5:30:14 PM",
      "dateFinished": "Sep 22, 2015 5:30:18 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val stockreturns \u003d trialsrdd.map(line \u003d\u003e line._2)",
      "dateUpdated": "Sep 22, 2015 5:30:22 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440194011308_-49134377",
      "id": "20150821-215331_1864498194",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "stockreturns: org.apache.spark.rdd.RDD[Array[(Double, Double)]] \u003d MapPartitionsRDD[6394] at map at \u003cconsole\u003e:285\n"
      },
      "dateCreated": "Sep 21, 2015 9:53:31 PM",
      "dateStarted": "Sep 22, 2015 5:30:22 PM",
      "dateFinished": "Sep 22, 2015 5:30:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "var j \u003d scala.collection.mutable.Map[Double, Double]()\nval xyz \u003d stockreturns.collect.flatten\nxyz",
      "dateUpdated": "Sep 22, 2015 5:30:26 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440204757755_1767386579",
      "id": "20150822-005237_399742516",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "j: scala.collection.mutable.Map[Double,Double] \u003d Map()\nxyz: Array[(Double, Double)] \u003d Array((1692.0,0.1185341232508462), (447.0,0.11855154699582802), (98.0,0.11855310894396912), (51.0,0.11854976680555157), (1692.0,-0.020449941127222173), (447.0,-0.020451757618369853), (98.0,-0.020456485204431347), (51.0,-0.02045308104587617), (1692.0,0.042555020640888924), (447.0,0.04256125473866664), (98.0,0.0425598066837947), (51.0,0.04256317244975821), (1692.0,-0.10060459304856414), (447.0,-0.10061690536239494), (98.0,-0.1006230337055969), (51.0,-0.1006135853753676), (1692.0,0.0872202799345652), (447.0,0.08723065605688846), (98.0,0.08722732657913251), (51.0,0.08722790010142131), (1692.0,0.09778996192223352), (447.0,0.09780436569109763), (98.0,0.09780517461132074), (51.0,0.09780371146148939), (1692.0,0.09470959525708511), (447.0,0.09472194485132827), (98....res447: Array[(Double, Double)] \u003d Array((1692.0,0.1185341232508462), (447.0,0.11855154699582802), (98.0,0.11855310894396912), (51.0,0.11854976680555157), (1692.0,-0.020449941127222173), (447.0,-0.020451757618369853), (98.0,-0.020456485204431347), (51.0,-0.02045308104587617), (1692.0,0.042555020640888924), (447.0,0.04256125473866664), (98.0,0.0425598066837947), (51.0,0.04256317244975821), (1692.0,-0.10060459304856414), (447.0,-0.10061690536239494), (98.0,-0.1006230337055969), (51.0,-0.1006135853753676), (1692.0,0.0872202799345652), (447.0,0.08723065605688846), (98.0,0.08722732657913251), (51.0,0.08722790010142131), (1692.0,0.09778996192223352), (447.0,0.09780436569109763), (98.0,0.09780517461132074), (51.0,0.09780371146148939), (1692.0,0.09470959525708511), (447.0,0.09472194485132827), (..."
      },
      "dateCreated": "Sep 22, 2015 12:52:37 AM",
      "dateStarted": "Sep 22, 2015 5:30:26 PM",
      "dateFinished": "Sep 22, 2015 5:30:28 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val stocksSummations \u003d xyz.foreach(i \u003d\u003e if(j.get(i._1) \u003d\u003d None){\n                                    j+\u003d (i._1-\u003ei._2)}\n                                    else {\n                                        j+\u003d (i._1 -\u003e (j.get(i._1).get+ i._2))\n                                    })",
      "dateUpdated": "Sep 22, 2015 5:30:31 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440171881193_-1499613439",
      "id": "20150821-154441_1738393070",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "stocksSummations: Unit \u003d ()\n"
      },
      "dateCreated": "Sep 21, 2015 3:44:41 PM",
      "dateStarted": "Sep 22, 2015 5:30:31 PM",
      "dateFinished": "Sep 22, 2015 5:30:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "j",
      "dateUpdated": "Sep 22, 2015 5:30:35 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440206048205_-61274037",
      "id": "20150822-011408_1761969156",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res450: scala.collection.mutable.Map[Double,Double] \u003d Map(1692.0 -\u003e 1.4250411073407496, 98.0 -\u003e 1.4251167356635217, 447.0 -\u003e 1.4253421023365733, 51.0 -\u003e 1.4254496983628457)\n"
      },
      "dateCreated": "Sep 22, 2015 1:14:08 AM",
      "dateStarted": "Sep 22, 2015 5:30:35 PM",
      "dateFinished": "Sep 22, 2015 5:30:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def PercentVaR(trials: RDD[Double]): Double \u003d {\r\n    val percentParam \u003d 100 / financialRiskAnalysisParam.getOrElse(0)\r\n    \r\n    val topLosses \u003d trials.takeOrdered(math.max(trials.count().toInt / percentParam, 1))\r\n    topLosses.last\r\n  }\r\n\r\n  def PercentES(trials: RDD[Double]): Double \u003d {\r\n     val percentParam \u003d 100 / financialRiskAnalysisParam.getOrElse(0)\r\n    val topLosses \u003d trials.takeOrdered(math.max(trials.count().toInt / percentParam, 1))\r\n    topLosses.sum / topLosses.length\r\n  }\r\n\r\n  def confidenceInterval(\r\n      trials: RDD[Double],\r\n      computeStatistic: RDD[Double] \u003d\u003e Double,\r\n      numResamples: Int,\r\n      pValue: Double): (Double, Double) \u003d {\r\n    val stats \u003d (0 until numResamples).map { i \u003d\u003e\r\n      val resample \u003d trials.sample(true, 1.0)\r\n      computeStatistic(resample)\r\n    }.sorted\r\n    val lowerIndex \u003d (numResamples * pValue / 2 - 1).toInt\r\n    val upperIndex \u003d math.ceil(numResamples * (1 - pValue / 2)).toInt\r\n    (stats(lowerIndex), stats(upperIndex))\r\n  }\r\n\r\n  def countFailures(stocksReturns: Seq[Array[Double]], valueAtRisk: Double): Int \u003d {\r\n    var failures \u003d 0\r\n    for (i \u003c- 0 until stocksReturns(0).size) {\r\n      val loss \u003d stocksReturns.map(_(i)).sum\r\n      if (loss \u003c valueAtRisk) {\r\n        failures +\u003d 1\r\n      }\r\n    }\r\n    failures\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:30:41 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440171897557_-303197602",
      "id": "20150821-154457_1801684409",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "PercentVaR: (trials: org.apache.spark.rdd.RDD[Double])Double\nPercentES: (trials: org.apache.spark.rdd.RDD[Double])Double\nconfidenceInterval: (trials: org.apache.spark.rdd.RDD[Double], computeStatistic: org.apache.spark.rdd.RDD[Double] \u003d\u003e Double, numResamples: Int, pValue: Double)(Double, Double)\ncountFailures: (stocksReturns: Seq[Array[Double]], valueAtRisk: Double)Int\n"
      },
      "dateCreated": "Sep 21, 2015 3:44:57 PM",
      "dateStarted": "Sep 22, 2015 5:30:41 PM",
      "dateFinished": "Sep 22, 2015 5:30:43 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val valueAtRisk \u003d PercentVaR(trials)\r\n    val ExpectedShortFall \u003d PercentES(trials)\r\n    println(\"VaR : \" + valueAtRisk)\r\n    println(\"ES : \" + ExpectedShortFall)",
      "dateUpdated": "Sep 22, 2015 5:30:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440172061733_-1808325432",
      "id": "20150821-154741_122015317",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "valueAtRisk: Double \u003d -0.07590761580271502\nExpectedShortFall: Double \u003d -0.0961332793240007\nVaR : -0.07590761580271502\nES : -0.0961332793240007\n"
      },
      "dateCreated": "Sep 21, 2015 3:47:41 PM",
      "dateStarted": "Sep 22, 2015 5:30:48 PM",
      "dateFinished": "Sep 22, 2015 5:30:55 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// maybe you want to write it out as csv\r\nval csvResults \u003d j map { case (key, value) \u003d\u003e Array(key, value).mkString(\",\\t\") }\r\n",
      "dateUpdated": "Sep 22, 2015 5:31:00 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440235811374_-1962615263",
      "id": "20150822-093011_1350888424",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "csvResults: scala.collection.mutable.Iterable[String] \u003d ArrayBuffer(1692.0,\t1.4250411073407496, 98.0,\t1.4251167356635217, 447.0,\t1.4253421023365733, 51.0,\t1.4254496983628457)\n"
      },
      "dateCreated": "Sep 22, 2015 9:30:11 AM",
      "dateStarted": "Sep 22, 2015 5:31:00 PM",
      "dateFinished": "Sep 22, 2015 5:31:00 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "finalresult.collect",
      "dateUpdated": "Sep 22, 2015 5:31:06 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440236179185_-413709257",
      "id": "20150822-093619_1743419845",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\u003cconsole\u003e:96: error: not found: value finalresult\n              finalresult.collect\n              ^\n"
      },
      "dateCreated": "Sep 22, 2015 9:36:19 AM",
      "dateStarted": "Sep 22, 2015 2:39:20 PM",
      "dateFinished": "Sep 22, 2015 2:39:20 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val filePrefix \u003d \"/home/hadoop/MonteCarloData/data/StockNamesMap.csv\"\r\nval idTostockNameMap \u003d readIdtoStockNameMap(new File(filePrefix))",
      "dateUpdated": "Dec 3, 2015 1:05:24 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440233886135_2031122648",
      "id": "20150822-085806_211896335",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "filePrefix: String \u003d /home/hadoop/data/StockNamesMap.csv\nidTostockNameMap: scala.collection.immutable.Map[Double,String] \u003d Map(2163.0 -\u003e RLYP, 645.0 -\u003e CSIQ, 892.0 -\u003e EVAR, 69.0 -\u003e AEPI, 2199.0 -\u003e RUSHA, 1322.0 -\u003e INAP, 1665.0 -\u003e MOFG, 1036.0 -\u003e FTGC, 2822.0 -\u003e Z, 2630.0 -\u003e USCR, 1586.0 -\u003e MCHX, 1501.0 -\u003e LLTC, 2452.0 -\u003e SZMK, 809.0 -\u003e EEMA, 1879.0 -\u003e OTIV, 1337.0 -\u003e INSY, 1718.0 -\u003e MZOR, 2094.0 -\u003e QRHC, 1411.0 -\u003e JRJC, 629.0 -\u003e CRRC, 2612.0 -\u003e UMBF, 1024.0 -\u003e FSCFL, 1469.0 -\u003e LBTYA, 365.0 -\u003e BPOPN, 2744.0 -\u003e WFD, 1369.0 -\u003e ISBC, 138.0 -\u003e AMKR, 1823.0 -\u003e OCRX, 1190.0 -\u003e HCOM, 1168.0 -\u003e HAIN, 2295.0 -\u003e SIBC, 2306.0 -\u003e SIRI, 760.0 -\u003e DSGX, 2341.0 -\u003e SNCR, 101.0 -\u003e AIXG, 2336.0 -\u003e SMTC, 2109.0 -\u003e RAND, 2131.0 -\u003e REDF, 1454.0 -\u003e KYTH, 2031.0 -\u003e PSCC, 1633.0 -\u003e MICT, 2778.0 -\u003e WSCI, 2072.0 -\u003e QAT, 1767.0 -\u003e NNBR, 1995.0 -\u003e PODD, 2263.0 -\u003e SFBC, 47..."
      },
      "dateCreated": "Sep 22, 2015 8:58:06 AM",
      "dateStarted": "Sep 22, 2015 5:31:08 PM",
      "dateFinished": "Sep 22, 2015 5:31:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import java.io.StringWriter\r\nimport au.com.bytecode.opencsv.CSVWriter\r\nimport scala.collection.JavaConversions._\r\nimport java.io.FileWriter\r\nimport java.io.BufferedWriter",
      "dateUpdated": "Sep 22, 2015 2:37:12 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440239931997_-1404277332",
      "id": "20150822-103851_24332895",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import java.io.StringWriter\nimport au.com.bytecode.opencsv.CSVWriter\nimport scala.collection.JavaConversions._\nimport java.io.FileWriter\nimport java.io.BufferedWriter\n"
      },
      "dateCreated": "Sep 22, 2015 10:38:51 AM",
      "dateStarted": "Sep 22, 2015 2:39:20 PM",
      "dateFinished": "Sep 22, 2015 2:39:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val fileLoc \u003d \"s3://advancedbigdataanalytics/outputReturns\"+rnd.nextInt()\n\nsc.parallelize(j.toSeq).saveAsTextFile(fileLoc)",
      "dateUpdated": "Sep 22, 2015 2:37:12 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440233523175_-1720070738",
      "id": "20150822-085203_1664775603",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "fileLoc: String \u003d s3://advancedbigdataanalytics/outputReturns-690244062\njava.io.FileNotFoundException: File s3://advancedbigdataanalytics/outputReturns-690244062/_temporary/0 does not exist.\n\tat com.amazon.ws.emr.hadoop.fs.s3n.S3NativeFileSystem.listStatus(S3NativeFileSystem.java:901)\n\tat com.amazon.ws.emr.hadoop.fs.s3n.S3NativeFileSystem.listStatus(S3NativeFileSystem.java:843)\n\tat org.apache.hadoop.fs.FileSystem.listStatus(FileSystem.java:1483)\n\tat org.apache.hadoop.fs.FileSystem.listStatus(FileSystem.java:1523)\n\tat com.amazon.ws.emr.hadoop.fs.EmrFileSystem.listStatus(EmrFileSystem.java:352)\n\tat org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter.getAllCommittedTaskPaths(FileOutputCommitter.java:269)\n\tat org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter.commitJob(FileOutputCommitter.java:309)\n\tat org.apache.hadoop.mapred.FileOutputCommitter.commitJob(FileOutputCommitter.java:136)\n\tat org.apache.spark.SparkHadoopWriter.commitJob(SparkHadoopWriter.scala:112)\n\tat org.apache.spark.rdd.PairRDDFunctions.saveAsHadoopDataset(PairRDDFunctions.scala:1088)\n\tat org.apache.spark.rdd.PairRDDFunctions.saveAsHadoopFile(PairRDDFunctions.scala:954)\n\tat org.apache.spark.rdd.PairRDDFunctions.saveAsHadoopFile(PairRDDFunctions.scala:863)\n\tat org.apache.spark.rdd.RDD.saveAsTextFile(RDD.scala:1290)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:112)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:117)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:119)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:121)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:123)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:125)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:127)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:129)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:131)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:133)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:135)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:137)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:139)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:141)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:143)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:145)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:147)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:149)\n\tat $iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:151)\n\tat $iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:153)\n\tat $iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:155)\n\tat $iwC.\u003cinit\u003e(\u003cconsole\u003e:157)\n\tat \u003cinit\u003e(\u003cconsole\u003e:159)\n\tat .\u003cinit\u003e(\u003cconsole\u003e:163)\n\tat .\u003cclinit\u003e(\u003cconsole\u003e)\n\tat .\u003cinit\u003e(\u003cconsole\u003e:7)\n\tat .\u003cclinit\u003e(\u003cconsole\u003e)\n\tat $print(\u003cconsole\u003e)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.spark.repl.SparkIMain$ReadEvalPrint.call(SparkIMain.scala:1065)\n\tat org.apache.spark.repl.SparkIMain$Request.loadAndRun(SparkIMain.scala:1338)\n\tat org.apache.spark.repl.SparkIMain.loadAndRunReq$1(SparkIMain.scala:840)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:871)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:819)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpretInput(SparkInterpreter.java:621)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:586)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:579)\n\tat org.apache.zeppelin.interpreter.ClassloaderInterpreter.interpret(ClassloaderInterpreter.java:57)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:93)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:276)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:170)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:118)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:745)\n\n"
      },
      "dateCreated": "Sep 22, 2015 8:52:03 AM",
      "dateStarted": "Sep 22, 2015 2:39:21 PM",
      "dateFinished": "Sep 22, 2015 2:39:28 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "  def countFailures(stocksReturns: Seq[Array[Double]], valueAtRisk: Double): Int \u003d {\r\n    var failures \u003d 0\r\n    for (i \u003c- 0 until stocksReturns(0).size) {\r\n      val loss \u003d stocksReturns.map(_(i)).sum\r\n      if (loss \u003c valueAtRisk) {\r\n        failures +\u003d 1\r\n      }\r\n    }\r\n    failures\r\n  }\r\n\r\n  def kupiecTestStatistic(total: Int, failures: Int, confidenceLevel: Double): Double \u003d {\r\n    val failureRatio \u003d failures.toDouble / total\r\n    val logNumer \u003d (total - failures) * math.log1p(-confidenceLevel) +\r\n      failures * math.log(confidenceLevel)\r\n    val logDenom \u003d (total - failures) * math.log1p(-failureRatio) +\r\n      failures * math.log(failureRatio)\r\n    -2 * (logNumer - logDenom)\r\n  }\r\n\r\n  def BackTestPValue(\r\n      stocksReturns: Seq[Array[Double]],\r\n      valueAtRisk: Double,\r\n      confidenceLevel: Double): Double \u003d {\r\n    val failures \u003d countFailures(stocksReturns, valueAtRisk)\r\n    val total \u003d stocksReturns(0).size\r\n    val testStatistic \u003d kupiecTestStatistic(total, failures, confidenceLevel)\r\n    1 - new ChiSquaredDistribution(1.0).cumulativeProbability(testStatistic)\r\n  }",
      "dateUpdated": "Sep 22, 2015 5:31:13 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440239971298_-636641979",
      "id": "20150822-103931_1911704670",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "countFailures: (stocksReturns: Seq[Array[Double]], valueAtRisk: Double)Int\nkupiecTestStatistic: (total: Int, failures: Int, confidenceLevel: Double)Double\nBackTestPValue: (stocksReturns: Seq[Array[Double]], valueAtRisk: Double, confidenceLevel: Double)Double\n"
      },
      "dateCreated": "Sep 22, 2015 10:39:31 AM",
      "dateStarted": "Sep 22, 2015 5:31:13 PM",
      "dateFinished": "Sep 22, 2015 5:31:15 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val varConfidenceInterval \u003d confidenceInterval(trials, PercentVaR, 100, .05)\r\n    val esConfidenceInterval \u003d confidenceInterval(trials, PercentES, 100, .05)\r\n    println(\"VaR confidence interval: \" + varConfidenceInterval)\r\n    println(\"ES confidence interval: \" + esConfidenceInterval)\r\n    println(\"Kupiec test p-value: \" + BackTestPValue(labels.toSeq, valueAtRisk, 0.05))",
      "dateUpdated": "Sep 22, 2015 5:31:19 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440253046827_-808854977",
      "id": "20150822-141726_1979680978",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "varConfidenceInterval: (Double, Double) \u003d (-0.09889101138103965,-0.05351450159610685)\nesConfidenceInterval: (Double, Double) \u003d (-0.11171190421875137,-0.0749851757029993)\nVaR confidence interval: (-0.09889101138103965,-0.05351450159610685)\nES confidence interval: (-0.11171190421875137,-0.0749851757029993)\nKupiec test p-value: 0.0\n"
      },
      "dateCreated": "Sep 22, 2015 2:17:26 PM",
      "dateStarted": "Sep 22, 2015 5:31:19 PM",
      "dateFinished": "Sep 22, 2015 5:37:04 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Sep 22, 2015 2:37:12 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440253355801_813891646",
      "id": "20150822-142235_125647763",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Sep 22, 2015 2:22:35 PM",
      "dateStarted": "Sep 22, 2015 2:39:29 PM",
      "dateFinished": "Sep 22, 2015 2:49:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Note ZJYGS6WXW",
  "id": "2AXV35H5P",
  "angularObjects": {
    "2AJXGMUUJ": [],
    "2AK8P7CPX": [],
    "2AM1YV5CU": [],
    "2AKK3QQXU": [],
    "2ANGGHHMQ": []
  },
  "config": {},
  "info": {}
}